/**
 * # Spatial dimensions of a 2D or 3D shape.
 *
 * A dimension is specified via the required attributes width, height, and an
 * optional attribute depth, all of which are of type double. If the
 * attribute depth is not specified, the object is a two dimensional object.
 * The width attribute of Dimensions specifies the size of the object in the
 * direction of the positive x axis, the height attribute specifies the size
 * of the object along the positive y axis and the depth attribute specifies
 * the size of the object along the positive z axis. All sizes for Dimensions
 * objects are positive values, and so the attributes are not allowed to take
 * negative values.  The Dimensions class also has an optional attribute id
 * of type SId. While not used in the &ldquo;layout&rdquo; package, it can be
 * used by programs to refer to the elements.
 */
[Prefix="libsbml::"]
interface Dimensions {
  /**
   * Creates a new Dimensions object with the given sizes.
   *
   * @param {LayoutPkgNamespaces} the namespace
   * @param {number} w width
   * @param {number} h height
   * @param {number} d depth
   */
  void Dimensions(LayoutPkgNamespaces ns, double w, double h, double d);

  /**
   * Sets the width to the given value.
   *
   * @param {number} w the width to use
   */
  void setWidth(double val);

  /**
   * Sets the height to the given value.
   *
   * @param h {number} the height to use
   */
  void setHeight(double val);

  /**
   * Sets the depth to the given value.  This will set
   * the depth to be 'explicitly set'.
   *
   * @param {number} d the depth to use
   */
  void setDepth(double val);

  /**
   * Returns the width.
   *
   * @return {number} the width attribute as a double.
   */
  double getWidth();

  /**
   * Returns the height.
   *
   * @return {number} the height attribute as a double.
   */
  double getHeight();

  /**
   * Returns the depth.
   *
   * @return {number} the depth attribute as a double.
   */
  double getDepth();
};

Dimensions implements SBase;

/**
 * # Representation of a point.
 *
 * A point is specified via the required attributes 'x', 'y' and an optional
 * attribute 'z', all of which are of type double. If the attribute z is not
 * specified, the object is a two dimensional object.  The Point class also
 * has an optional attribute id of type SId. While not used in the
 * "layout" package, it can be used by programs to refer to the
 * elements.
 */
[Prefix="libsbml::"]
interface Point {
  /**
   * Sets the x offset.
   *
   * @param {number} x
   */
  void setX(double x);

  /**
   * Sets the y offset.
   *
   * @param {number} y
   */
  void setY(double y);

  /**
   * Sets the z offset.
   *
   * @param {number} z
   */
  void setZ(double z);

  /**
   * Sets the x offset.
   *
   * @param {number} x
   */
  void setXOffset(double x);

  /**
   * Sets the y offset.
   *
   * @param {number} y
   */
  void setYOffset(double y);

  /**
   * Sets the z offset.
   *
   * @param {number} y
   */
  void setZOffset(double z);

  /**
   * Returns the x offset.
   *
   * @return {number}
   */
  double x();

  /**
   * Returns the y offset.
   *
   * @return {number}
   */
  double y();

  /**
   * Returns the z offset.
   *
   * @return {number}
   */
  double z();

  /**
   * Returns the x offset.
   *
   * @return {number}
   */
  double getXOffset();

  /**
   * Returns the y offset.
   *
   * @return {number}
   */
  double getYOffset();

  /**
   * Returns the z offset.
   *
   * @return {number}
   */
  double getZOffset();
};

Point implements SBase;

/**
 * # A bounding box for an item in a diagram.
 */
[Prefix="libsbml::"]
interface BoundingBox {
  Dimensions getDimensions();
  void setDimensions(Dimensions b);

  Point getPosition();
  void setPosition(Point b);

  void setX(double x);
  void setY(double y);
  void setZ(double z);

  double x();
  double y();
  double z();
};

BoundingBox implements SBase;

/**
 * # Base class of objects that store layouts.
 *
 * All the more specific layout elements (CompartmentGlyph, GeneralGlyph,
 * SpeciesGlyph, ReactionGlyph, ReferenceGlyph, TextGlyph, and
 * SpeciesReferenceGlyph) are derived from the class GraphicalObject. Each
 * object of class GraphicalObject has a mandatory BoundingBox, which
 * specifies the position and the size of the object.  While GraphicalObject
 * is the base class for most elements in the &ldquo;layout&rdquo; package,
 * it is not an abstract class. It can be instantiated when used in the
 * listOfAdditionalGraphicalObjects to describe additional elements and
 * relationships. Since it only describes a BoundingBox, programs are
 * encouraged to add Annotation objects that describe program-specific
 * graphical information.
 */
[Prefix="libsbml::"]
interface GraphicalObject {
};

GraphicalObject implements SBase;

/**
 * # A glyph for an SBML compartment.
 */
[Prefix="libsbml::"]
interface CompartmentGlyph {
};

CompartmentGlyph implements SBase;

/**
 * # A glyph for miscellaneous items.
 *
 * The GeneralGlyph is used to facilitate the representation of elements
 * other than Compartment, Species and Reaction and thus can be used for the
 * display of relationships of Rule or elements defined by other SBML
 * packages. It closely follows the structure of the ReactionGlyph.
 * GeneralGlyph is defined to have an optional attribute reference as well as
 * the elements curve, listOfReferenceGlyphs and listOfSubGlyphs.
 */
[Prefix="libsbml::"]
interface GeneralGlyph {
};

GeneralGlyph implements SBase;

/**
 * # A glyph for an SBML reaction.
 *
 * Analogous to how a Reaction object has to at least have one reactant or
 * product, the ReactionGlyph has to at least have one SpeciesReferenceGlyph
 * stored in the ListOfSpeciesReferenceGlyphs. Figure 12 on the following
 * page provides the UML diagram for the class definition.  The ReactionGlyph
 * inherits from GraphicalObject. In addition to the attributes inherited
 * from GraphicalObject, the ReactionGlyph is described by an attribute
 * reaction, a Curve element and a listOfSpeciesReferenceGlyphs element.  The
 * Curve describes the center section of a ReactionGlyph. The center section
 * is frequently used by tools to separate the point where substrates arcs
 * come together, from the point where product arcs split off. The Curve is
 * optional, and when not present the dimensions of the inherited BoundingBox
 * describes the center section, by storing its position and dimension.
 */
[Prefix="libsbml::"]
interface ReactionGlyph {
  DOMString getReactionId();
  void setReactionId(DOMString t);
  boolean isSetReactionId();

  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  unsigned long getNumSpeciesReferenceGlyphs();
  SpeciesReferenceGlyph getSpeciesReferenceGlyph(unsigned long n);
};

ReactionGlyph implements SBase;

/**
 * # A glyph for an SBML species.
 *
 * In addition to the attributes it inherits from GraphicalObject, the
 * SpeciesGlyph object has an optional 'species' attribute.
 */
[Prefix="libsbml::"]
interface SpeciesGlyph {
  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  DOMString getSpeciesId();
  void setSpeciesId(DOMString t);
  boolean isSetSpeciesId();
};

SpeciesGlyph implements SBase;

/**
 * # A glyph for an SBML <em>species reference</em>.
 *
 * The %SpeciesReferenceGlyph element describes the graphical connection
 * between a SpeciesGlyph and a ReactionGlyph (which would be an arrow or
 * some curve in most cases). A SpeciesReferenceGlyph inherits from
 * GraphicalObject, and adds a mandatory attribute 'speciesGlyph' and two
 * optional attributes 'speciesReference' and 'role'. Optionally, the
 * SpeciesReferenceGlyph also has a child element 'curve'.
 *
 * If the curve is specified, it overrides the inherited bounding box.
 */
[Prefix="libsbml::"]
interface SpeciesReferenceGlyph {
  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  CubicBezier createCubicBezier();
  LineSegment createLineSegment();

  Curve getCurve();
  boolean isSetCurve();
};

SpeciesReferenceGlyph implements SBase;

/**
 * # A glyph for a text label.
 *
 * The TextGlyph class describes the position and dimension of text labels
 * in the &ldquo;layout&rdquo; package.  It inherits from GraphicalObject and
 * adds the attributes graphicalObject, text and originOfText.
 */
[Prefix="libsbml::"]
interface TextGlyph {
  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  DOMString getText();
  void setText(DOMString t);
  boolean isSetText();
};

TextGlyph implements SBase;

[Prefix="libsbml::"]
interface ListOfLayouts {
  SBasePlugin getPlugin(DOMString name);
};

/**
 * Plugin subclass for the layout extension.
 */
[Prefix="libsbml::"]
interface LayoutModelPlugin {
  Layout createLayout();

  // NOTE: libSBML signedness is inconsistent here
  long getNumLayouts();
  Layout getLayout(unsigned long n);

  ListOfLayouts getListOfLayouts();
};

[Prefix="libsbml::"]
interface LayoutPkgNamespaces {
  void LayoutPkgNamespaces(unsigned long level, unsigned long version);
};

[Prefix="libsbmljs::"]
interface LayoutCaster {
  void LayoutCaster();
  LayoutModelPlugin castToLayoutPlugin(SBasePlugin p);
};

/**
 * The layout extension.
 */
[Prefix="libsbml::"]
interface LayoutExtension {
};

[Prefix="libsbmljs::"]
interface LayoutExtensionWrapper {
  void LayoutExtensionWrapper();
  DOMString getXmlnsL2();
  DOMString getXmlnsL3V1V1();
};

[Prefix="libsbmljs::"]
interface CurveCaster {
  void CurveCaster();
  boolean isCubicBezier(LineSegment x);
  CubicBezier castToCubicBezier(LineSegment x);
};
