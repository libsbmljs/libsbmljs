/**
 * # libsbmljs
 *
 * A WebAssembly / JavaScript wrapper for the [libSBML C++ library](http://sbml.org/Software/libSBML).
 *
 * ## Async Loading
 *
 * Unlike most JavaScript modules,
 * this module and associated WebAssembly file are loaded asynchronously
 * by the browser, so you can not begin using it immediately after importing it.
 * Instead, the module returns a promise-like object with a `then()` method,
 * which is invoked with the module itself when it is fully loaded.
 * This is a standard convention for all Emscripten modules.
 *
 * ```javascript
 * import libsbml from 'libsbml_stable'
 * // the module isn't usable yet - wait for it to load
 * libsbml().then((libsbml) => {
 *   // now it is safe to use the module
 *   const doc = new libsbml.SBMLDocument(3,2)
 * })
 * ```
 *
 * Despite this suggestive naming scheme, the libsbml().then() method
 * does not return an authentic JavaScript Promise. For instance, the
 * expected catch() method is missing. Instead, it is recommended that users
 * use normal try/catch blocks to handle errors within the callback.
 *
 * ## Static Methods
 *
 * The mechanism for calling static methods is somewhat unconventional.
 * Static methods should be called via an class's `prototype`.
 * For example, to get the namespace for the SBML comp extension,
 * one would normally call the getXmlnsL3V1V1 static method of the
 * [C++ CompExtension class](http://sbml.org/Software/libSBML/5.17.0/docs//cpp-api/class_comp_extension.html).
 * In libsbmljs, this method should be called on the class's `prototype` instead.
 *
 * ```javascript
 * import libsbml from 'libsbml_stable'
 * libsbml().then((libsbml) => {
 *   const doc = new libsbml.SBMLDocument(3,2)
 *   // call the getXmlnsL3V1V1 static method on the prototype, not the type itself
 *   doc.enablePackage(libsbml.CompExtension.prototype.getXmlnsL3V1V1(), 'comp', true)
 * })
 * ```
 *
 * ## addX Methods vs. createX Methods
 *
 * Objects in libSBML typically provide two types of methods for
 * adding a subobject. Methods that start with `add` take a pre-existing
 * subobject and add it to the parent, whereas methods that
 * start with `create` return a new subobject. You should generally
 * use the `create` methods. While `add` methods technically work in this
 * wrapper, they have very confusing ownership semantics and using them
 * will most likely result in bugs which are difficult to track down.
 * This advice also applies to C++, but debugging can
 * be harder in a JavaScript environment.
 *
 * ```javascript
 * import libsbml from 'libsbml_stable'
 * libsbml().then((libsbml) => {
 *   ...
 *   const model = ...
 *   // prefer this way of creating species
 *   const spec = model.createSpecies()
 *   // this way is more awkward
 *   const spec = new libsbml.Species(...)
 *   model.addSpecies(spec)
 * })
 * ```
 *
 * ## Module
 * @module libsbml
 */
