/**
 * # SBML's  SBase class, base class of most SBML objects.
 *
 * Most components in SBML are derived from a single abstract base type,
 * SBase.  In addition to serving as the parent class for most other
 * classes of objects in SBML, this base type is designed to allow a
 * modeler or a software package to attach arbitrary information to each
 * major element or list in an SBML model.
 *
 * SBase has an optional subelement called "notes".  It is intended to
 * serve as a place for storing optional information intended to be seen by
 * humans.  An example use of the "notes" element would be to contain
 * formatted user comments about the model element in which the "notes"
 * element is enclosed.  There are certain conditions on the XHTML content
 * permitted inside the "notes" element; please consult the <a
 * target="_blank" href="http://sbml.org/Documents/Specifications">SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for "notes"
 * content.
 *
 * SBase has another optional subelement called "annotation".  Whereas the
 * "notes" element described above is a container for content to be shown
 * directly to humans, the "annotation" element is a container for optional
 * software-generated content *not* meant to be shown to humans.  The
 * element's content type is <a target="_blank"
 * href="http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls">XML type
 * "any"</a>, allowing essentially arbitrary data content.  SBML places
 * only a few restrictions on the organization of the content; these are
 * intended to help software tools read and write the data as well as help
 * reduce conflicts between annotations added by different tools.  As is
 * the case with "notes", it is important to refer to the <a
 * target="_blank" href="http://sbml.org/Documents/Specifications">SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for
 * "annotation" content.
 *
 * It is worth pointing out that the "annotation" element in the definition
 * of SBase exists in order that software developers may attach optional
 * application-specific data to the elements in an SBML model.  However, it
 * is important that this facility not be misused.  In particular, it is
 *  *critical* that data essential to a model definition or that can
 * be encoded in existing SBML elements is  *not* stored in
 * "annotation". Parameter values, functional dependencies between model
 * elements, etc., should not be recorded as annotations.  It is crucial to
 * keep in mind the fact that data placed in annotations can be freely
 * ignored by software applications.  If such data affects the
 * interpretation of a model, then software interoperability is greatly
 * impeded.
 *
 * SBML Level 2 introduced an optional SBase attribute named "metaid" for
 * supporting metadata annotations using RDF (<a target="_blank"
 * href="http://www.w3.org/RDF/">Resource Description Format</a>). The
 * attribute value has the data type <a
 * href="http://www.w3.org/TR/REC-xml/#id">XML ID</a>, the XML identifier
 * type, which means each "metaid" value must be globally unique within an
 * SBML file.  (Importantly, this uniqueness criterion applies across any
 * attribute with type <a href="http://www.w3.org/TR/REC-xml/#id">XML
 * ID</a>, not just the "metaid" attribute used by SBML---something to
 * be aware of if your application-specific XML content inside the
 * "annotation" subelement happens to use <a
 * href="http://www.w3.org/TR/REC-xml/#id">XML ID</a>.)  The "metaid" value
 * serves to identify a model component for purposes such as referencing
 * that component from metadata placed within "annotation" subelements.
 *
 * Beginning with SBML Level 2 Version 2, SBase has an optional
 * attribute named "sboTerm" for supporting the use of the Systems Biology
 * Ontology.  In SBML proper, the data type of the attribute is a string of
 * the form "SBO:NNNNNNN", where "NNNNNNN" is a seven digit integer number;
 * libSBML simplifies the representation by only storing the "NNNNNNN"
 * integer portion.  Thus, in libSBML, the "sboTerm" attribute on SBase has
 * data type long, and SBO identifiers are stored simply as integers.
 * (For convenience, SBase offers methods for returning both the integer
 * form and a text-string form of the SBO identifier.)  SBO terms are a
 * type of optional annotation, and each different class of SBML object
 * derived from SBase imposes its own requirements about the values
 * permitted for "sboTerm".  More details can be found in SBML specifications
 * for Level 2 Version 2 and above.
 *
 * Finally, note that, in the list of methods on SBase, there is no public
 * constructor because SBase is an abstract class.  The constructors reside
 * in the subclasses derived from SBase.
 *
 * See the [libSBML C++ docs for this class](http://sbml.org/Software/libSBML/5.17.0/docs//cpp-api/class_s_base.html).
 */
[Prefix="libsbml::"]
interface SBase {
  /**
   * Returns the value of the "id" attribute of this SBML object, if it has one,
   * or the "variable" attribute of a Rule, or the "symbol" attribute of
   * an InitialAssignment.
   *
   * @return {string} the id of this SBML object, or the "variable" if the object is a
   * Rule, or the "symbol" if the object is an InitialAssignment.
   *
   * **Note:** Because of the inconsistent behavior of this function with respect
   * to assignments and rules, callers should use getIdAttribute() instead.
   */
  DOMString getId();

  /**
   * Sets the value of the "id" attribute of this SBML object.
   *
   * @param {string} id
   */
  boolean setId(DOMString id);

  /**
   * Predicate returning true if this object's "id" attribute is set.
   *
   * @return {boolean} true if the "id" attribute of this SBML object is
   * set, false otherwise.
   */
  boolean isSetIdAttribute();


  /**
   * @return {string} the value of the "name" attribute of this SBML object.
   */
  DOMString getName();

  /**
   * Sets the value of the "name" attribute of this SBML object.
   *
   * @param {string} name the value to assign to the name attribute
   */
  long setName(DOMString name);

  /**
   * Predicate returning true if this
   * object's "name" attribute is set.
   */
  boolean isSetName();

  DOMString getMetaId();
  /**
   * Sets the value of the meta-identifier attribute of this SBML object.
   *
   * The string metaid is copied.
   *
   * @param {string} metaid the identifier string to use as the value of the
   * "metaid" attribute.
   *
   * @see getMetaId()
   * @see isSetMetaId()
   */
  long setMetaId(DOMString metaid);

  /**
   * Predicate returning true if this object's "metaid" attribute is set.
   *
   * @return {boolean} true if the "metaid" attribute of this SBML object is
   * set, false otherwise.
   *
   * @see getMetaId()
   * @see setMetaId(const std::string& metaid)
   */
  boolean isSetMetaId();

  /**
   * Returns the URL representation of the "sboTerm" attribute of this
   * object.
   *
   * This method returns the entire SBO identifier as a text string in the
   * form `http://identifiers.org/biomodels.sbo/SBO:NNNNNNN`.
   *
   * @return {number} the value of the "sboTerm" attribute as an identifiers.org URL,
   * or an empty string if the value is not set.
   */
  long getSBOTerm();
  /**
   * Sets the value of the "sboTerm" attribute.
   *
   * @param {number} value the NNNNNNN integer portion of the SBO identifier
   */
  long setSBOTerm(long value);

  /**
   * Predicate returning true if this
   * object's "sboTerm" attribute is set.
   *
   * @return {boolean} true if the "sboTerm" attribute of this SBML object is
   * set, false otherwise.
   */
  boolean isSetSBOTerm();

  /**
   * Unsets the value of the "sboTerm" attribute of this SBML object.
   */
  long unsetSBOTerm();

  /**
   * Sets the value of the "annotation" subelement of this SBML object.
   *
   * The content of annotation is copied, and any previous content of
   * this object's "annotation" subelement is deleted.
   *
   * Whereas the SBase "notes" subelement is a container for content to be
   * shown directly to humans, the "annotation" element is a container for
   * optional software-generated content not meant to be shown to
   * humans.  Every object derived from SBase can have its own value for
   * "annotation".  The element's content type is <a target="_blank"
   * href="http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls">XML type
   * "any"</a>, allowing essentially arbitrary well-formed XML data
   * content.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * Call this method will result in any existing content of the
   * "annotation" subelement to be discarded.  Unless you have taken steps
   * to first copy and reconstitute any existing annotations into the @p
   * annotation that is about to be assigned, it is likely that performing
   * such wholesale replacement is unfriendly towards other software
   * applications whose annotations are discarded.  An alternative may be
   * to use SBase::appendAnnotation(const XMLNode* annotation) or
   * SBase::appendAnnotation(const std::string& annotation).
   *
   * @param annotation an XML string that is to be used as the content
   * of the "annotation" subelement of this object.
   *
   * @see getAnnotationString()
   * @see isSetAnnotation()
   */
  long setAnnotation(DOMString str);

  /**
   * Unsets the value of the "annotation" subelement of this SBML object.
   *
   * Whereas the SBase "notes" subelement is a container for content to be
   * shown directly to humans, the "annotation" element is a container for
   * optional software-generated content not meant to be shown to
   * humans.  Every object derived from SBase can have its own value for
   * "annotation".  The element's content type is <a target="_blank"
   * href="http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls">XML type
   * "any"</a>, allowing essentially arbitrary well-formed XML data
   * content.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   */
  long unsetAnnotation();

  /**
   * Returns the content of the "annotation" subelement of this object as a
   * character string.
   *
   * The annotations returned by this method will be in string form.  See the
   * method getAnnotation() for a version that returns annotations in XML form.
   *
   * @return {string} the annotation of this SBML object as a character string.
   *
   * @see getAnnotation()
   * @see isSetAnnotation()
   * @see unsetAnnotation()
   */
  DOMString getAnnotationString();

  /**
   * Returns the SBML Level of the SBMLDocument object containing this
   * object.
   *
   * @return {number} the SBML level of this SBML object.
   *
   * @see getVersion()
   */
  unsigned long getLevel();

  /**
   * Returns the Version within the SBML Level of the SBMLDocument object
   * containing this object.
   *
   * @return {number} the SBML version of this SBML object.
   *
   * @see getLevel()
   */
  unsigned long getVersion();

  /**
   * Returns the content of the "notes" subelement of this object as a
   * string.
   *
   * For an alternative method of accessing the notes, see getNotes(),
   * which returns the content as an XMLNode tree structure.  Depending on
   * an application's needs, one or the other method may be more
   * convenient.
   *
   * @return {string} the content of the "notes" subelement of this SBML object as a
   * string.
   *
   * @see getNotes()
   * @see isSetNotes()
   * @see unsetNotes()
   */
  DOMString getNotesString();

  /**
   * Predicate returning true if this
   * object's "notes" subelement exists and has content.
   *
   * The optional SBML element named "notes", present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * "notes" element would be to contain formatted user comments about the
   * model element in which the "notes" element is enclosed.  Every object
   * derived directly or indirectly from type SBase can have a separate
   * value for "notes", allowing users considerable freedom when adding
   * comments to their models.
   *
   * The format of "notes" elements must be <a target="_blank"
   * href="http://www.w3.org/TR/xhtml1/">XHTML 1.0</a>.  To help
   * verify the formatting of "notes" content, libSBML provides the static
   * utility method SyntaxChecker::hasExpectedXHTMLSyntax however,
   * readers are urged to consult the appropriate <a target="_blank"
   * href="http://sbml.org/Documents/Specifications">SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level 2 and 3
   * specifications have considerable detail about how "notes" element
   * content must be structured.
   *
   * @return {string} true if a "notes" subelement exists, false otherwise.
   */
  boolean isSetNotes();

  /**
   * Unsets the value of the "notes" subelement of this SBML object.
   *
   * The optional SBML element named "notes", present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * "notes" element would be to contain formatted user comments about the
   * model element in which the "notes" element is enclosed.  Every object
   * derived directly or indirectly from type SBase can have a separate
   * value for "notes", allowing users considerable freedom when adding
   * comments to their models.
   *
   * The format of "notes" elements must be <a target="_blank"
   * href="http://www.w3.org/TR/xhtml1/">XHTML 1.0</a>.  To help
   * verify the formatting of "notes" content, libSBML provides the static
   * utility method SyntaxChecker::hasExpectedXHTMLSyntax however,
   * readers are urged to consult the appropriate <a target="_blank"
   * href="http://sbml.org/Documents/Specifications">SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level 2 and 3
   * specifications have considerable detail about how "notes" element
   * content must be structured.
   */
  long unsetNotes();

  /**
   * Returns the number of CVTerm objects in the annotations of this SBML
   * object.
   *
   * @return {number} the number of CVTerms for this SBML object
   */
  long getNumCVTerms();

  /**
   * Returns the nth CVTerm in the list of CVTerms of this SBML
   * object.
   *
   * @param {number} n unsigned long the index of the CVTerm to retrieve
   *
   * @return {CVTerm} the nth CVTerm in the list of CVTerms for this SBML object.
   * If the index n is invalid, NULL is returned.
   */
  CVTerm getCVTerm(unsigned long n);

  /**
   * Returns the number of plug-in objects (extenstion interfaces) for SBML
   * Level 3 package extensions known.
   *
   * @return {number} the number of plug-in objects (extension interfaces) of
   * package extensions known by this instance of libSBML.
   */
  unsigned long getNumPlugins();

  /**
   * Returns the nth plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension.
   *
   * If no such plugin exists, NULL is returned.
   *
   * **Note:** To get a plugin corresponding to a given id, use the
   * findPlugin method. Calling Model.findPlugin("fbc") will return an FbcModelPlugin; calling
   * Parameter.findPlugin("comp") will return CompSBasePlugin, etc.
   * However, these instances must be cast to the derived type using {@link castObject}
   *
   * @param {number} n the index of the plug-in to return
   *
   * @return {SBasePlugin} the nth plug-in object (the libSBML extension interface) of a
   * package extension.
   * If the index n is invalid, NULL is returned.
   */
  SBasePlugin getPlugin(unsigned long n);
//   SBasePlugin getPlugin(DOMString name);

  /**
   * Enables or disables the given SBML Level 3 package on this object.
   *
   * This method enables the specified package on this object and other
   * objects connected by child-parent links in the same SBMLDocument object.
   * This method is the converse of
   * {@link SBase#disablePackage}.
   *
   * @param {string} pkgURI the URI of the package
   *
   * @param {string} pkgPrefix the XML prefix of the package
   *
   * @param {boolean} flag whether to enable (true) or disable (false) the package
   */
  long enablePackage(DOMString pkgURI, DOMString pkgPrefix, boolean flag);


  /**
   * Disables the given SBML Level&nbsp;3 package on this object.
   *
   * This method disables the specified package on this object
   * and other objects connected by child-parent links in the same
   * SBMLDocument object.
   *
   * An example of when this may be useful is during construction of model
   * components when mixing existing and new models.  Suppose your
   * application read an SBML document containing a model that used the SBML
   * Hierarchical Model Composition ("comp") package, and
   * extracted parts of that model in order to construct a new model in
   * memory.  The new, in-memory model will not accept a component drawn from
   * an other SBMLDocument with different package namespace declarations.
   * You could reconstruct the same namespaces in the in-memory model first,
   * but as a shortcut, you could also disable the package namespace on the
   * object being added.  Here is a code example to help clarify this:
   *
   * ```javascript
   * libsbml().then((libsbml) => {
   *   // We read in an SBML L3V1 model that uses the 'comp'
   *   // package namespace.
   *   const doc = new libsbml.SBMLReader().readSBMLFromString("...sbml with comp elements...")
   *
   *   // We extract one of the species from the model.
   *   const s1 = doc.getModel().getSpecies(0)
   *
   *   // We construct a new model.  This model does not use the
   *   // 'comp' package.
   *   const newModel = new libsbml.Model(3,1)
   *
   *   // The following will fail with an error, because addSpecies()
   *   // will first check that the parent of the given object has
   *   // namespaces declared, and will discover that s1 does but
   *   // newModel does not.
   *
   *   // newModel.addSpecies(s1)
   *
   *   // However, if we disable the 'comp' package on s1, then
   *   // the call to addSpecies will work.
   *
   *   s1.disablePackage("http://www.sbml.org/sbml/level3/version1/comp/version1", "comp")
   *   newModel.addSpecies(s1)
   * })
   * ```
   *
   * @param {string} pkgURI the URI of the package
   *
   * @param {string} pkgPrefix the XML prefix of the package
   *
   * See {@link SBase#enablePackage}
   */
  long disablePackage(DOMString pkgURI, DOMString pkgPrefix);
};

/**
 * # Base class for extending SBML objects in packages.
 *
 * This class of objects is defined by libSBML only and has no direct equivalent
 * in terms of SBML components. This class is not prescribed by the SBML specifications,
 * although it is used to implement features defined in SBML.
 *
 * The SBasePlugin class is libSBML's base class for extensions of core SBML component
 * objects. SBasePlugin defines basic virtual methods for reading/writing/checking additional
 * attributes and/or subobjects; these methods should be overridden by subclasses to
 * implement the necessary features of an extended SBML object.
 */
[Prefix="libsbml::"]
interface SBasePlugin {
  /**
   * Returns the short-form name of the package to which this plugin object belongs.
   *
   * @return {string} the short-form package name (or nickname) of the SBML package implemented by this package extension.
   */
  DOMString getPackageName();

  /**
   * Returns the XML namespace prefix of the package to which this plugin object belongs.
   *
   * @return {string} the XML namespace prefix of the SBML Level 3 package implemented by this libSBML package extension.
   */
  DOMString getPrefix();

  /**
   * Returns the XML namespace URI for the package to which this object belongs.
   *
   * In the XML representation of an SBML document, XML namespaces are used to identify the
   * origin of each XML construct used. XML namespaces are identified by their unique
   * resource identifiers (URIs). The core SBML specifications stipulate the namespaces
   * that must be used for core SBML constructs; for example, all XML elements that
   * belong to SBML Level 3 Version 1 Core must be placed in the XML namespace identified
   * by the URI "http://www.sbml.org/sbml/level3/version1/core". Individual SBML Level 3
   * packages define their own XML namespaces; for example, all elements belonging to the
   * SBML Level 3 Layout Version 1 package must be placed in the XML namespace
   * "http://www.sbml.org/sbml/level3/version1/layout/version1/".
   *
   * This method first looks into the SBMLNamespaces object possessed by the parent
   * SBMLDocument object of the current object. If this cannot be found, this method
   * returns the result of getElementNamespace().
   *
   * @return {string} a string, the URI of the XML namespace to which this object belongs.
   */
  DOMString getURI();

  /**
   * Returns the Version within the SBML Level of the package extension of this plugin object.
   *
   * @return {number} the SBML Version.
   */
  unsigned long getVersion();

  /**
   * Returns the SBML Level of the package extension of this plugin object.
   *
   * @return {number} the SBML Level.
   */
  unsigned long getLevel();
};
