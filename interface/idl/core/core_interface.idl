/**
 * # A helper class for parsing Level 3 formulae
 *
 * libSBML uses the global function SBML_parseL3Formula
 * for parsing formulae, but libsbml.js only exposes
 * C++ types, not functions. This helper class can be used in lieu of SBML_parseL3Formula.
 *
 * See the libSBML C++ docs for [SBML_parseL3Formula](http://sbml.org/Software/libSBML/5.17.0/docs//cpp-api/_l3_parser_8cpp.html#a58e584e7c21801b34d79fed7a7c05ac8).
 *
 * @example
 * new libsbml.SBMLFormulaParser().parseL3Formula('S1*S2') // returns the expected AST with a product node and two leaf nodes
 */
[Prefix="libsbml::"]
interface SBMLFormulaParser {
  void SBMLFormulaParser();
  /**
   * Parses a SBML Level 3 formula. Invokes the C++ method SBML_parseL3Formula.
   *
   * @param {string} formula a string of the Level 3 formula to parse
   * @return {ASTNode} the root AST node of the formula
   */
  ASTNode parseL3Formula(DOMString formula);

  /**
   * Parses a SBML Level 1 formula. Invokes the C++ method SBML_parseFormula.
   *
   * @param {string} formula a string of the Level 1 formula to parse
   * @return {ASTNode} the root AST node of the formula
   */
  ASTNode parseFormula(DOMString formula);
};

[Prefix="libsbml::"]
interface SBMLError {
  DOMString getMessage();
};

[Prefix="libsbml::"]
interface SBMLErrorLog {
// reserved word apparently. whoop-de-doo
//   DOMString toString();
};

enum libsbml__idl__SBMLErrorCategory_t {
  "libsbml::LIBSBML_CAT_SBML",
  "libsbml::LIBSBML_CAT_SBML_L1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L2V1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L2V2_COMPAT",
  "libsbml::LIBSBML_CAT_GENERAL_CONSISTENCY",
  "libsbml::LIBSBML_CAT_IDENTIFIER_CONSISTENCY",
  "libsbml::LIBSBML_CAT_UNITS_CONSISTENCY",
  "libsbml::LIBSBML_CAT_MATHML_CONSISTENCY",
  "libsbml::LIBSBML_CAT_SBO_CONSISTENCY",
  "libsbml::LIBSBML_CAT_OVERDETERMINED_MODEL",
  "libsbml::LIBSBML_CAT_SBML_L2V3_COMPAT",
  "libsbml::LIBSBML_CAT_MODELING_PRACTICE",
  "libsbml::LIBSBML_CAT_INTERNAL_CONSISTENCY",
  "libsbml::LIBSBML_CAT_SBML_L2V4_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L3V1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L3V2_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_COMPATIBILITY"
};

// TODO: add OperationReturnValues_t

[Prefix="libsbmljs::"]
interface Capabilities {
  void Capabilities();
  boolean isLayoutSupported();
  boolean isRenderSupported();
};
