/**
 * # Overall SBML container object.
 *
 * LibSBML uses the class SBMLDocument as a top-level
 * container for storing SBML content and data associated with it (such as
 * warnings and error messages).  The two primary means of reading an SBML
 * model, {@link SBMLReader#readSBML} and
 * {@link SBMLReader#readSBMLFromString}, both return an SBMLDocument
 * object.  From there, callers can inquire about any errors encountered
 * (e.g., using {@link SBMLDocument#getNumErrors}), access the Model object, and
 * perform other actions such as consistency-checking and model
 * translation.
 *
 * When creating fresh models programmatically, the starting point is
 * typically the creation of an SBMLDocument object instance.  The
 * SBMLDocument constructor accepts arguments for the SBML Level and
 * Version of the model to be created.  After creating the SBMLDocument
 * object, calling programs then typically call SBMLDocument::createModel()
 * almost immediately, and then proceed to call the methods on the Model
 * object to fill out the model's contents.
 *
 * SBMLDocument corresponds roughly to the class Sbml defined in the
 * SBML Level 2 specification and SBML in the Level 3
 * specification.  It does not have a direct correspondence in SBML
 * Level 1.  (However, to make matters simpler for applications,
 * libSBML creates an SBMLDocument no matter whether the model is
 * Level 1, Level 2 or Level 3.)  In its barest form, when written out in
 * XML format for (e.g.) SBML Level 2 Version 4, the corresponding
 * structure is the following:
 *
 * ```
 * <sbml xmlns="http://www.sbml.org/sbml/level2/version4" level="2" version="4">
 *   ...
 * </sbml>
 * ```
 *
 * SBMLDocument is derived from SBase, and therefore contains the usual SBase
 * attributes (in SBML Level 2 and Level 3) of "metaid" and "sboTerm", as
 * well as the subelements "notes" and "annotation".  It also contains the
 * attributes "level" and "version" indicating the Level and Version of the
 * SBML data structure.  These can be accessed using the methods defined by
 * the SBase class for that purpose.
 *
 * ## Checking consistency and adherence to SBML specifications
 *
 * One of the most important features of libSBML is its ability to perform
 * SBML validation to ensure that a model adheres to the SBML specification
 * for whatever Level+Version combination the model uses.  SBMLDocument
 * provides the methods for running consistency-checking and validation
 * rules on the SBML content.
 *
 * First, a brief explanation of the rationale is in order.  In libSBML
 * versions up to and including the version 3.3.x series, the
 * individual methods for creating and setting attributes and other
 * components were quite lenient, and allowed a caller to compose SBML
 * entities that might not, in the end, represent valid SBML.  This allowed
 * applications the freedom to do things such as save incomplete models
 * (which is useful when models are being developed over long periods of
 * time).  In the version 4.x series, libSBML is somewhat stricter,
 * but still permits structures to be created independently and the results
 * to be combined in a separate step.  In all these cases, it means that a
 * separate validation step is necessary when a calling program finally
 * wants to finish a complete SBML document.
 *
 * The primary interface to this validation facility is SBMLDocument's
 * SBMLDocument::checkInternalConsistency() and
 * SBMLDocument::checkConsistency().  The former verifies the basic
 * internal consistency and syntax of an SBML document, and the latter
 * implements more elaborate validation rules (both those defined by the
 * SBML specifications, as well as additional rules offered by libSBML).
 *
 * The checks performed by {@link SBMLDocument#checkInternalConsistency} are
 * hardwired and cannot be changed by calling programs, but the validation
 * performed by {@link SBMLDocument#checkConsistency} is under program control
 * using the method {@link SBMLDocument#setConsistencyChecks}.  Applications can
 * selectively disable specific kinds of checks that they may not be
 * interested in, by calling setConsistencyChecks with
 * appropriate parameters.
 *
 * These methods have slightly different relevance depending on whether a
 * model is created programmaticaly from scratch, or whether it is read in
 * from a file or data stream.  The following list summarizes the possible
 * scenarios.
 *
 * *Scenario 1: Creating a model from scratch*.  Before writing out
 * the model,
 *
 * * Call SBMLDocument::checkInternalConsistency(), then inquire about
 * the results by calling SBMLDocument::getNumErrors()
 *
 * * Call {@link SBMLDocument#setConsistencyChecks} to configure
 * which checks will be performed by SBMLDocument::checkConsistency()
 *
 * * Call SBMLDocument::checkConsistency(), then inquire about the results by
 * calling SBMLDocument::getNumErrors()
 *
 * *Scenario 2: Reading a model from a file or data stream.* After
 * reading the model,
 *
 * * Basic consistency checks will have been performed automatically by
 * libSBML upon reading the content, so you only need to inquire about the
 * results by using SBMLDocument::getNumErrors()
 *
 * * Call {@link SBMLDocument#setConsistencyChecks} to configure
 * which checks are performed by {@link SBMLDocument#checkConsistency}
 *
 * * Call {@link SBMLDocument#checkConsistency}, then inquire about the results
 * by calling {@link SBMLDocument#getNumErrors}
 *
 * It should be noted that as of SBML Level 3 Version 2, the Model
 * became an optional child of SBMLDocument, instead of being required.  This
 * means that one can no longer use {@link SBMLDocument#getModel} as a cheap method
 * of checking if an SBML document was read in properly: the more robust
 * getError methods detailed above must be used instead.
 *
 * ## Converting documents between Levels and Versions of SBML
 *
 * LibSBML provides facilities for limited translation of SBML between
 * Levels and Versions of the SBML specifications.  The method for doing is
 * is {@link SBMLDocument#setLevelAndVersion}.  In
 * general, models can be converted upward without difficulty (e.g., from
 * SBML Level 1 to Level 2, or from an earlier Version of
 * Level 2 to the latest Version of Level 2).  Sometimes models
 * can be translated downward as well, if they do not use constructs
 * specific to more advanced Levels of SBML.
 *
 * Calling setLevelAndVersion will not necessarily lead
 * to a successful conversion.  The method will return a boolean value
 * to indicate success or failure.  Callers must check the error log (see
 * next section) attached to the SBMLDocument object after calling
 * setLevelAndVersion in order to assess whether any
 * problems arose.
 *
 * If an application is interested in translating to a lower Level and/or
 * Version of SBML within a Level, the following methods allow for prior
 * assessment of whether there is sufficient compatibility to make a
 * translation possible:
 *
 * * {@link SBMLDocument#checkL1Compatibility()}
 * * {@link SBMLDocument#checkL2v1Compatibility()}
 * * {@link SBMLDocument#checkL2v2Compatibility()}
 * * {@link SBMLDocument#checkL2v3Compatibility()}
 * * {@link SBMLDocument#checkL2v4Compatibility()}
 * * {@link SBMLDocument#checkL2v5Compatibility()}
 * * {@link SBMLDocument#checkL3v1Compatibility()}
 *
 * Some changes between Versions of SBML Level 2 may lead to
 * unexpected behaviors when attempting conversions in either direction.
 * For example, SBML Level 2 Version 4 relaxed the requirement
 * for consistency in units of measurement between expressions annd
 * quantities in a model.  As a result, a model written in Version 4,
 * if converted to Version 3 with no other changes, may fail
 * validation as a Version 3 model because Version 3 imposed
 * stricter requirements on unit consistency.
 *
 * Other changes between SBML Level 2 and Level 3 make downward conversions
 * challenging.  In some cases, it means that a model converted to
 * Level 2 from Level 3 will contain attributes that were not
 * explicitly given in the Level 3 model, because in Level 2
 * these attributes may have been optional or have default values.
 *
 * ## Error handling
 *
 * Upon reading a model, SBMLDocument logs any problems encountered while
 * reading the model from the file or data stream.  The log contains
 * objects that record diagnostic information about any notable issues that
 * arose.  Whether the problems are warnings or errors, they are both
 * reported through a single common interface involving the object class
 * SBMLError.
 *
 * The methods {@link SBMLDocument#getNumErrors}, {@link SBMLDocument#getError} and
 * {@link SBMLDocument#printErrors} allow callers to interact with the warnings
 * or errors logged.  Alternatively, callers may retrieve the entire log as
 * an SBMLErrorLog object using the method SBMLDocument::getErrorLog().
 * The SBMLErrorLog object provides some alternative methods for
 * interacting with the set of errors and warnings.  In either case,
 * applications typically should first call getNumErrors() to
 * find out if any issues have been logged after specific libSBML
 * operations such as the ones discussed in the sections above.  If they
 * have, then an application will should proceed to inspect the individual
 * reports using either the direct interfaces on SBMLDocument or using the
 * methods on the SBMLErrorLog object.
 *
 */
[Prefix="libsbml::"]
interface SBMLDocument {
  // ctor
  void SBMLDocument(long level, long version);

  // model
  Model getModel();
  Model createModel();

  // errors
  unsigned long getNumErrors();
  [Const] SBMLError getError(unsigned long n);
  SBMLErrorLog getErrorLog();

  // level / version
  unsigned long getVersion();
  unsigned long getLevel();

  // plugins / packages
  unsigned long getNumPlugins();
  SBasePlugin getPlugin(unsigned long n);

  boolean enablePackage(DOMString pkgName, DOMString pkgPrefix, boolean flag);
  boolean disablePackage(DOMString pkgName, DOMString pkgPrefix);
  boolean isPackageEnabled(DOMString pkgName);
  long setPackageRequired(DOMString pkgName, boolean flag);

  // validation
  unsigned long checkConsistency();
  unsigned long checkInternalConsistency();
  unsigned long validateSBML();

  // compatibility checking
  unsigned long checkL1Compatibility();
  unsigned long checkL2v1Compatibility();
  unsigned long checkL2v2Compatibility();
  unsigned long checkL2v3Compatibility();
  unsigned long checkL2v4Compatibility();
  unsigned long checkL3v1Compatibility();
  unsigned long checkL3v2Compatibility();

  void setConsistencyChecks(libsbml__idl__SBMLErrorCategory_t category, boolean apply);


  /**
   * Sets the SBML Level and Version of this SBMLDocument instance,
   * attempting to convert the model as needed.
   *
   * This method is the principal way in libSBML to convert models between
   * Levels and Versions of SBML.  Generally, models can be converted
   * upward without difficulty (e.g., from SBML Level 1 to
   * Level 2, or from an earlier Version of Level 2 to the latest
   * Version of Level 2).  Sometimes models can be translated downward
   * as well, if they do not use constructs specific to more advanced
   * Levels of SBML.
   *
   * Before calling this method, callers may check compatibility directly
   * using any of the methods:
   *
   * * {@link SBMLDocument#checkL1Compatibility}
   * * {@link SBMLDocument#checkL2v1Compatibility}
   * * {@link SBMLDocument#checkL2v2Compatibility}
   * * {@link SBMLDocument#checkL2v3Compatibility}
   * * {@link SBMLDocument#checkL2v4Compatibility}
   * * {@link SBMLDocument#checkL2v5Compatibility}
   * * {@link SBMLDocument#checkL3v1Compatibility}
   *
   * The valid combinations of SBML Level and Version as of this release
   * of libSBML are the following:
   *
   * * Level 1 Version 2
   * * Level 2 Version 1
   * * Level 2 Version 2
   * * Level 2 Version 3
   * * Level 2 Version 4
   * * Level 2 Version 5
   * * Level 3 Version 1
   * * Level 3 Version 2
   *
   *
   * Strict conversion applies the additional criteria that both the
   * source and the target model must be consistent SBML.  Users can
   * control the consistency checks that are applied using the
   * {@link SBMLDocument#setConsistencyChecksForConversion} method.  If either
   * the source or the potential target model have validation errors, the
   * conversion is not performed.  When a strict conversion is successful,
   * the underlying SBML object model is altered to reflect the new level
   * and version.  Thus, information that cannot be converted
   * (e.g. sboTerms) will be lost.
   *
   * @param {number} level the desired SBML Level
   *
   * @param {number} version the desired Version within the SBML Level
   *
   * @param {boolean} strict boolean indicating whether to check consistency
   * of both the source and target model when performing
   * conversion (defaults to true)
   *
   * @param {boolean} ignorePackages boolean indicating whether the presence of
   * packages should be ignored by the conversion routine
   * (defaults to false)
   *
   * @return {boolean} true if the level and version of the document were
   * successfully set to the requested values (which may have required
   * conversion of the model), false otherwise.
   *
   * **Note:** Calling this method will not necessarily lead to a successful
   * conversion.  If the conversion fails, it will be logged in the error
   * list associated with this SBMLDocument.  Callers should consult
   * getNumErrors() to find out if the conversion succeeded without
   * problems.  For conversions from Level 2 to Level 1, callers
   * can also check the Level of the model after calling this method to
   * find out whether it is Level 1.  (If the conversion to
   * Level 1 failed, the Level of this model will be left unchanged.)
   * }
   */
  boolean setLevelAndVersion (unsigned long level, unsigned long version, boolean strict, boolean ignorePackages);
};
