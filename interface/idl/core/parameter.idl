/**
 * # An SBML parameter: a named symbol with a value.
 *
 * A Parameter is used in SBML to define a symbol associated with a value;
 * this symbol can then be used in mathematical formulas in a model.  By
 * default, parameters have constant value for the duration of a
 * simulation, and for this reason are called parameters instead of
 * variables in SBML, although it is crucial to understand that SBML
 * parameters represent both concepts.  Whether a given SBML
 * parameter is intended to be constant or variable is indicated by the
 * value of its "constant" attribute.
 *
 * SBML's Parameter has a required attribute, "id", that gives the
 * parameter a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A parameter can also have an optional
 * "name" attribute of type string.  Identifiers and names must be used
 * according to the guidelines described in the SBML specifications.
 *
 * The optional attribute "value" determines the value (of type double)
 * assigned to the parameter.  A missing value for "value" implies that
 * the value either is unknown, or to be obtained from an external source,
 * or determined by an initial assignment.  The unit of measurement
 * associated with the value of the parameter can be specified using the
 * optional attribute "units".  Here we only mention briefly some notable
 * points about the possible unit choices, but readers are urged to consult
 * the SBML specification documents for more information:
 *
 * * In SBML Level 3, there are no constraints on the units that
 * can be assigned to parameters in a model; there are also no units to
 * inherit from the enclosing Model object (unlike the case for, e.g.,
 * Species and Compartment).
 *
 * * In SBML Level 2, the value assigned to the parameter's "units"
 * attribute must be chosen from one of the following possibilities: one of
 * the base unit identifiers defined in SBML; one of the built-in unit
 * identifiers "substance", "time", "volume", "area" or
 * "length"; or the identifier of a new unit defined in the list of unit
 * definitions in the enclosing Model structure.  There are no constraints
 * on the units that can be chosen from these sets.  There are no default
 * units for parameters.
 *
 * The Parameter structure has another boolean attribute named "constant"
 * that is used to indicate whether the parameter's value can vary during a
 * simulation.  (In SBML Level 3, the attribute is mandatory and must
 * be given a value; in SBML Levels below Level 3, the attribute is
 * optional.)  A value of true indicates the parameter's value cannot be
 * changed by any construct except InitialAssignment.  Conversely, if the
 * value of "constant" is false, other constructs in SBML, such as rules
 * and events, can change the value of the parameter.
 *
 * SBML Level 3 uses a separate object class, LocalParameter, for
 * parameters that are local to a Reaction's KineticLaw.  In Levels prior
 * to SBML Level 3, the Parameter class is used both for definitions
 * of global parameters, as well as reaction-local parameters stored in a
 * list within KineticLaw objects.  Parameter objects that are local to a
 * reaction (that is, those defined within the KineticLaw structure of a
 * Reaction) cannot be changed by rules and therefore are implicitly always constant;
 * consequently, in SBML Level 2, parameter
 * definitions within Reaction structures should not have their
 * "constant" attribute set to false.
 *
 * What if a global parameter has its "constant" attribute set to false,
 * but the model does not contain any rules, events or other constructs
 * that ever change its value over time?  Although the model may be
 * suspect, this situation is not strictly an error.  A value of false
 * for "constant" only indicates that a parameter can change value, not
 * that it must.
 *
 * As with all other major SBML components, Parameter is derived from
 * SBase, and the methods defined on SBase are available on Parameter.
 *
 * **Note:** The use of the term parameter in SBML sometimes leads to
 * confusion among readers who have a particular notion of what something
 * called "parameter" should be.  It has been the source of heated debate,
 * but despite this, no one has yet found an adequate replacement term that
 * does not have different connotations to different people and hence leads
 * to confusion among some subset of users.  Perhaps it would have been
 * better to have two constructs, one called constants and the other
 * called variables.  The current approach in SBML is simply more
 * parsimonious, using a single Parameter construct with the boolean flag
 * "constant" indicating which flavor it is.  In any case, readers are
 * implored to look past their particular definition of a parameter and
 * simply view SBML's Parameter as a single mechanism for defining both
 * constants and (additional) variables in a model.  (We write
 * additional because the species in a model are usually considered to be
 * the central variables.)  After all, software tools are not required to
 * expose to users the actual names of particular SBML constructs, and
 * thus tools can present to their users whatever terms their designers
 * feel best matches their target audience.
 *
 * In SBML Level 3 Version 2, many restrictions were lifted
 * requiring only Boolean values in Boolean contexts, and numeric
 * values in numeric contexts.  This means that a Parameter may now
 * be used as a Boolean, despite canonically having a numeric value.
 * To be consistent, one should always assign it a value of true
 * or false, and use it in Boolean contexts exclusively.  It would
 * be appropriate to give it an SBO value of 602 ('Logical parameter')
 * if one chooses to do this.
 */
[Prefix="libsbml::"]
interface Parameter {
  /**
   * Gets the numerical value of this Parameter.
   *
   * @return {number} the value of the "value" attribute of this Parameter, as a
   * number of type double.
   *
   * **Note:** It is crucial that callers not blindly call
   * Parameter.getValue() without first using Parameter.isSetValue() to
   * determine whether a value has ever been set.  Otherwise, the value
   * return by Parameter::getValue() may not actually represent a value
   * assigned to the parameter.  The reason is simply that the data type
   * double in a program always has some value.  A separate test is
   * needed to determine whether the value is a true model value, or
   * uninitialized data in a computer's memory location.
   */
  double getValue();

  /**
   * Sets the "value" attribute of this Parameter to the given double
   * value and marks the attribute as set.
   *
   * @param {number} value a double, the value to assign
   */
  long setValue(double value);

  /**
   * Predicate returning true if the
   * "value" attribute of this Parameter is set.
   *
   * In SBML definitions after SBML Level 1 Version 1,
   * parameter values are optional and have no defaults.  If a model read
   * from a file does not contain a setting for the "value" attribute of a
   * parameter, its value is considered unset; it does not default to any
   * particular value.  Similarly, when a Parameter object is created in
   * libSBML, it has no value until given a value.  The
   * Parameter::isSetValue() method allows calling applications to
   * determine whether a given parameter's value has ever been set.
   *
   * In SBML Level 1 Version 1, parameters are required to have
   * values and therefore, the value of a Parameter <b>should always be
   * set</b>.  In Level 1 Version 2 and beyond, the value is
   * optional and as such, the "value" attribute may or may not be set.
   *
   * @return {boolean} true if the value of this Parameter is set,
   * false otherwise.
   */
  boolean isSetValue();

  /**
   * Predicate returning true if the
   * "units" attribute of this Parameter is set.
   *
   * @return {boolean} true if the "units" attribute of this Parameter is
   * set, false otherwise.
   */
  boolean isSetUnits();

  /**
   * Gets the units defined for this Parameter.
   *
   * The value of an SBML parameter's "units" attribute establishes the
   * unit of measurement associated with the parameter's value.
   *
   * @return {string} the value of the "units" attribute of this Parameter, as a
   * string.  An empty string indicates that no units have been assigned.
   */
  DOMString getUnits();

  /**
   * Sets the "units" attribute of this Parameter to a copy of the given
   * units identifier units.
   *
   * @param {number} units a string, the identifier of the units to assign to this Parameter instance
   */
  long setUnits(DOMString units);

  /**
   * Gets the value of the "constant" attribute of this Parameter instance.
   *
   * @return {boolean} true if this Parameter is declared as being constant,
   * false otherwise.
   */
  boolean getConstant();

  /**
   * Sets the "constant" attribute of this Parameter to the given boolean
   * flag.
   *
   * @param {number} flag a boolean, the value for the "constant" attribute of this Parameter instance
   */
  long setConstant(boolean value);

  /**
   * Predicate returning true if the
   * "constant" attribute of this Parameter is set.
   *
   * @return {boolean} true if the "constant" attribute of this Parameter is set, false otherwise
   */
  boolean isSetConstant();


  /**
   * Initializes the fields of this Parameter object to "typical" defaults
   * values.
   *
   * The SBML Parameter component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.  Many
   * SBML object classes defined by libSBML have an initDefaults() method
   * to set the values to certain common defaults, based mostly on what
   * they are in SBML Level&nbsp;2.  In the case of Parameter, this method
   * only sets the value of the "constant" attribute to true.
   */
  void initDefaults ();
};

Parameter implements SBase;

/**
 * # A parameter inside an SBML reaction definition.
 *
 * LocalParameter has been introduced in SBML Level 3 to serve as the
 * object class for parameter definitions that are intended to be local to
 * a Reaction.  Objects of class LocalParameter never appear at the Model
 * level; they are always contained within ListOfLocalParameters lists
 * which are in turn contained within KineticLaw objects.
 *
 * Like its global Parameter counterpart, the LocalParameter object class
 * is used to define a symbol associated with a value; this symbol can then
 * be used in a model's mathematical formulas (and specifically, for
 * LocalParameter, reaction rate formulas).  Unlike Parameter, the
 * LocalParameter class does not have a "constant" attribute: local
 * parameters within reactions are always constant.
 *
 * LocalParameter has one required attribute, "id", to give the
 * parameter a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A parameter can also have an optional
 * "name" attribute of type string.  Identifiers and names must be used
 * according to the guidelines described in the SBML specifications.
 *
 * The optional attribute "value" determines the value (of type double)
 * assigned to the parameter.  A missing value for "value" implies that
 * the value either is unknown, or to be obtained from an external source,
 * or determined by an initial assignment.  The unit of measurement
 * associated with the value of the parameter can be specified using the
 * optional attribute "units".  Here we only mention briefly some notable
 * points about the possible unit choices, but readers are urged to consult
 * the SBML specification documents for more information:
 *
 * * In SBML Level 3, there are no constraints on the units that
 * can be assigned to parameters in a model; there are also no units to
 * inherit from the enclosing Model object.
 *
 * * In SBML Level 2, the value assigned to the parameter's "units"
 * attribute must be chosen from one of the following possibilities: one of
 * the base unit identifiers defined in SBML; one of the built-in unit
 * identifiers "substance", "time", "volume", "area" or
 * "length"; or the identifier of a new unit defined in the list of unit
 * definitions in the enclosing Model structure.  There are no constraints
 * on the units that can be chosen from these sets.  There are no default
 * units for local parameters.
 *
 * As with all other major SBML components, LocalParameter is derived from
 * SBase, and the methods defined on SBase are available on LocalParameter.
 *
 * In SBML Level 3 Version 2, the scope of the LocalParameter
 * was expanded slightly to officially encompass the entire Reaction
 * instead of just the KineticLaw in which it appears.  This has no
 * effect on models using only SBML Level 3 Core constructs,
 * but has the potential to allow SBML Level 3 Packages to
 * include elements in a Reaction that could reference a
 * LocalParameter from that Reaction's KineticLaw.  It also means that
 * no LocalParameter may have the same "id" as a referenced Species
 * in any SimpleSpeciesReference in that Reaction.
 *
 * **Note:** libsbml.js does not contain implementations of
 * isSetConstant(), setConstant(), and getConstant()) for LocalParameter
 * objects because these methods are only relevant to the parent class Parameter.
 */
[Prefix="libsbml::"]
interface LocalParameter {
  /**
   * Gets the numerical value of this LocalParameter.
   *
   * @return {number} the value of the "value" attribute of this LocalParameter, as a
   * number of type double.
   *
   * **Note:** It is crucial that callers not blindly call
   * LocalParameter.getValue() without first using LocalParameter.isSetValue() to
   * determine whether a value has ever been set.  Otherwise, the value
   * return by LocalParameter::getValue() may not actually represent a value
   * assigned to the LocalParameter.  The reason is simply that the data type
   * double in a program always has some value.  A separate test is
   * needed to determine whether the value is a true model value, or
   * uninitialized data in a computer's memory location.
   */
  double getValue();

  /**
   * Sets the "value" attribute of this LocalParameter to the given double
   * value and marks the attribute as set.
   *
   * @param {number} value a double, the value to assign
   */
  long setValue(double value);


  /**
   * Predicate returning true if the
   * "value" attribute of this LocalParameter is set.
   *
   * In SBML definitions after SBML Level 1 Version 1,
   * LocalParameter values are optional and have no defaults.  If a model read
   * from a file does not contain a setting for the "value" attribute of a
   * LocalParameter, its value is considered unset; it does not default to any
   * particular value.  Similarly, when a LocalParameter object is created in
   * libSBML, it has no value until given a value.  The
   * LocalParameter::isSetValue() method allows calling applications to
   * determine whether a given LocalParameter's value has ever been set.
   *
   * In SBML Level 1 Version 1, LocalParameters are required to have
   * values and therefore, the value of a LocalParameter <b>should always be
   * set</b>.  In Level 1 Version 2 and beyond, the value is
   * optional and as such, the "value" attribute may or may not be set.
   *
   * @return {boolean} true if the value of this LocalParameter is set,
   * false otherwise.
   */
  boolean isSetValue();

  /**
   * Predicate returning true if the
   * "units" attribute of this LocalParameter is set.
   *
   * @return {boolean} true if the "units" attribute of this LocalParameter is
   * set, false otherwise.
   */
  boolean isSetUnits();
  /**
   * Gets the units defined for this LocalParameter.
   *
   * The value of an SBML LocalParameter's "units" attribute establishes the
   * unit of measurement associated with the LocalParameter's value.
   *
   * @return {string} the value of the "units" attribute of this LocalParameter, as a
   * string.  An empty string indicates that no units have been assigned.
   */
  DOMString getUnits();

  /**
   * Sets the "units" attribute of this LocalParameter to a copy of the given
   * units identifier units.
   *
   * @param {number} units a string, the identifier of the units to assign to this LocalParameter instance
   */
  long setUnits(DOMString units);

  /**
   * Constructs and returns a UnitDefinition that corresponds to the units
   * of this LocalParameter's value.
   *
   * @return {UnitDefinition} a UnitDefinition that expresses the units of this
   * LocalParameter, or NULL if one cannot be constructed.
   *
   * **Note:** The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the LocalParameter object has not yet been
   * added to a model, or the model itself is incomplete, unit analysis is
   * not possible, and consequently this method will return NULL.
   */
  UnitDefinition getDerivedUnitDefinition();

  /*boolean getConstant();
  long setConstant(boolean value);
  boolean isSetConstant();*/


  /**
   * Initializes the fields of this Parameter object to "typical" defaults
   * values.
   *
   * The SBML Parameter component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.  Many
   * SBML object classes defined by libSBML have an initDefaults() method
   * to set the values to certain common defaults, based mostly on what
   * they are in SBML Level&nbsp;2.  In the case of Parameter, this method
   * only sets the value of the "constant" attribute to true.
   */
  void initDefaults ();
};

LocalParameter implements SBase;
