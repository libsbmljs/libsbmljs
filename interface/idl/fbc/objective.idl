/**
 * # An objective function.
 *
 * An integral component in a complete description of a steady-state model is
 * the so-called *objective function*, which generally consists of a
 * linear combination of model variables (fluxes) and a sense (direction). In
 * the SBML Level&nbsp;3 fbc ("fbc") package, this concept
 * is succinctly captured in the Objective class.
 *
 * The Objective class is derived from the normal SBML SBase class and
 * inherits the "metaid" and "sboTerm" attributes, as well as the
 * subcomponents for Annotation and Notes.  To these, the Objective class
 * adds an optional attribute named "type".  The type attribute can take one
 * of two literal values: "maximize" or "minimize".  The values
 * represent the sense of the optimality constraint for the FBC model.
 *
 * The "fbc" package allows for the definition of multiple model
 * objectives, with one being designated as active.  The active objective is
 * indicated using the attribute "activeObjective" on the ListOfObjectives
 * object. Here is an example of the XML encoding of a model with a list of
 * objective functions:
 *
 * <fbc:listOfObjectives fbc:activeObjective="obj1">
 *  <fbc:objective fbc:id="obj1" fbc:type="maximize">
 *   <fbc:listOfFluxObjectives>
 *    <fbc:fluxObjective fbc:reaction="R101" fbc:coefficient="1"/>
 *   </fbc:listOfFluxObjectives>
 *  </fbc:objective>
 *  <fbc:objective fbc:id="obj2" fbc:type="minimize">
 *   <fbc:listOfFluxObjectives>
 *    <fbc:fluxObjective fbc:reaction="R102" fbc:coefficient="-2.5"/>
 *    <fbc:fluxObjective fbc:reaction="R103" fbc:coefficient="1"/>
 *   </fbc:listOfFluxObjectives>
 *  </fbc:objective>
 * </fbc:listOfObjectives>
 */
[Prefix="libsbml::"]
interface Objective {
  /**
  * Get a FluxObjective from the ListOfFluxObjectives.
  *
  * @param {number} n the index number of the FluxObjective to get
  *
  * @return {FluxObjective} the nth FluxObjective in the ListOfFluxObjectives within this
  * Objective.
  * If the index n is invalid, NULL is returned.
  */
  FluxObjective getFluxObjective(unsigned long n);


  /**
   * Adds a copy the given FluxObjective to this Objective.
   *
   * @param {FluxObjective} fo the FluxObjective object to add
   */
  long addFluxObjective(FluxObjective fo);


  /**
   * Get the number of FluxObjective objects in this Objective.
   *
   * @return the number of FluxObjective objects in this Objective.
   */
  unsigned long getNumFluxObjectives();


  /**
   * Creates a new FluxObjective object.
   *
   * This method creates the FluxObjective object, adds it to this Objective
   * object's ListOfFluxObjectives, and returns the FluxObjective object
   * created.
   *
   * @return {FluxObjective} a new FluxObjective object instance.
   */
  FluxObjective createFluxObjective();


  /**
   * Removes the nth FluxObjective from the ListOfFluxObjectives.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param {number} n the index of the FluxObjective to remove
   */
  FluxObjective removeFluxObjective(unsigned long n);
};

Objective implements SBase;
