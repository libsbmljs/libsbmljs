[Prefix="libsbml::"]
interface GeneProduct {};

/**
 * # Extension of Model.
 *
 * The FbcModelPlugin object is used to extend the standard SBML Model object
 * with features used in the SBML Level 3 fbc ("fbc")
 * package.  In Version 1 of the "fbc" specification, the
 * extended Model class has two optional subobjects: ListOfObjectives and
 * ListOfFluxBounds.  In Version 2 of the specification, the extended
 * Model object is defined differently: it is extended with a new required
 * attribute named "strict", and the two optional subobjects ListOfObjectives
 * and ListOfGeneProducts.  (ListOfFluxBounds is not used in Version 2.)
 *
 * ##  The "strict" attribute on the (extended) Model class
 *
 * The mandatory attribute "strict", of type <code>boolean</code>, in
 * Version 2 of this package, is used to
 * apply an additional set of restrictions to the model.  The "strict"
 * attribute helps ensure that the Flux Balance Constraints package can be
 * used to encode legacy flux-balance analysis models expressible as Linear
 * Programs (LP's) for software that is unable to analyze arbitrary
 * mathematical expressions that may appear in an SBML model.  In addition, a
 * "strict" model is fully described and mathematically consistent, for
 * example, by ensuring that all fluxes have a valid upper or lower bound.
 *
 * The following restrictions are in effect if an "fbc" model
 * object has a value of `true` for the attribute "strict" on
 * Model:
 *
 * * Each Reaction in a Model must define values for the attributes
 * "lowerFluxBound" and "upperFluxBound", with each attribute pointing to a
 * valid Parameter object defined in the current Model.
 *
 * * Each Parameter object referred to by the Reaction attributes
 * "lowerFluxBound" and "upperFluxBound" must have its "constant" attribute
 * set to the value `true` and its "value" attribute set to a
 * value of type <code>double</code>.  This value may not be
 * `NaN`.
 *
 * * SpeciesReference objects in Reaction objects must have their
 * "stoichiometry" attribute set to a <code>double</code> value that is not
 * `NaN`, nor `-INF`, nor `INF`. In
 * addition, the value of their "constant" attribute must be set to
 * `true`.
 *
 * * InitialAssignment objects may not target the Parameter objects
 * referenced by the Reaction attributes "lowerFluxBound" and
 * "upperFluxBound", nor any SpeciesReference objects.
 *
 * * All defined FluxObjective objects must have their coefficient
 * attribute set to a <code>double</code> value that is not
 * `NaN`, nor `-INF`, nor `INF`.
 *
 * * A Reaction "lowerFluxBound" attribute may not point to a Parameter
 * object that has a value of `INF`.
 *
 * * A Reaction "upperFluxBound" attribute may not point to a Parameter
 * object that has a value of `-INF`.
 *
 * * For all Reaction objects, the value of a "lowerFluxBound" attribute
 * must be less than or equal to the value of the "upperFluxBound" attribute.
 *
 * While it is not compulsory for a "strict" Flux Balance Constraints model
 * to define an Objective, doing so does does allow the model to be
 * formulated as a Linear Program and optimized.  However, this decision is
 * left to the modeler.  Note that all other properties of the objects
 * referred to in the list above are to be set as specified in the relevant
 * SBML Level 3 Version 1 Core and fbc ("fbc")
 * specifications.
 *
 * Alternatively, if the value of the strict attribute is
 * `false`, then none of these restrictions apply and the model
 * creator can choose to define "fbc" models that are not
 * necessarily encodable as an LP.  For example, if strict is
 * `false`, the InitialAssignment construct may be used to set
 * any valid numerical entity, including Parameter values and stoichiometric
 * coefficients, with any value of type <code>double</code>.  In addition,
 * Parameter elements are no longer required to be flagged as constant, thus
 * allowing for a Flux Balance Constraints model's use in alternative, hybrid
 * modeling strategies.
 *
 *
 * ##  Lists of subobjects on the (extended) Model class
 *
 * The ListOfObjectives is used to define the objectives of a given
 * "fbc" model.  Objectives generally consist of linear
 * combinations of model variables (fluxes) and a direction for the
 * optimality constraint (either maximization or minimization).  Each
 * Objective has a ListOfFluxObjectives subobjects.
 *
 * In Version 2 of "fbc", the ListOfGeneProducts is used to
 * define the gene products represented by the "fbc" model.
 *
 * In Version 1 of "fbc", there is no ListOfGeneProducts,
 * and instead, Model can have an optional ListOfFluxBounds.
 *
 * See {@link Objective}, {@link FluxObjective}, {@link FluxBound}
 */
[Prefix="libsbml::"]
interface FbcModelPlugin {
  /**
   * Returns the value of the "strict" attribute of this FbcModelPlugin.
   *
   * @return {boolean} the value of the "strict" attribute of this FbcModelPlugin as a boolean.
   */
  boolean getStrict();

  /**
   * Sets the value of the "strict" attribute of this FbcModelPlugin.
   *
   * @param {boolean} strict bool value of the "strict" attribute to be set
   */
  long setStrict(boolean strict);

  /**
   * Predicate returning true if this FbcModelPlugin's "strict" attribute
   * is set.
   *
   * @return {boolean} true if this FbcModelPlugin's "strict" attribute has been set,
   * otherwise false is returned.
   */
  boolean isSetStrict();

  /**
   * Unsets the value of the "strict" attribute of this FbcModelPlugin.
   */
  long unsetStrict();

  /**
   * Returns the FluxBound object that belongs to the given index. If the
   * index is invalid, NULL is returned.
   *
   * @param {number} n the index number of the FluxBound to get
   *
   * @return {FluxBound} the nth FluxBound in the ListOfFluxBounds.
   * If the index n is invalid, NULL is returned.
   */
  FluxBound getFluxBound (unsigned long n);

  /**
   * Adds a copy of the given FluxBound object to the list of FluxBounds.
   *
   * @param {FluxBound} bound the FluxBound object to be added to the list of FluxBounds
   */
  long addFluxBound (FluxBound bound);

  /**
   * Creates a new FluxBound object and adds it to the list of FluxBound objects
   * and returns it.
   *
   * @return {FluxBound} a newly created FluxBound object.
   */
  FluxBound createFluxBound();

  /**
   * Removes the nth FluxBound object from this plugin object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   *  deleting it.
   *
   * @param {FluxBound} n the index of the FluxBound object to remove
   *
   * @return the FluxBound object removed.  As mentioned above, the
   * caller owns the returned object. NULL is returned if the
   * given index is out of range.
   */
  FluxBound removeFluxBound(unsigned long n);

  /**
   * Returns the number of FluxBound object in this plugin object.
   *
   * @return {number} the number of FluxBound object in this plugin object.
   */
  unsigned long getNumFluxBounds();

  /**
   * Get an Objective from the ListOfObjectives.
   *
   * @param {number} n the index number of the Objective to get
   *
   * @return {Objective} the nth Objective in the ListOfObjectives within this FbcModelPlugin.
   * If the index n is invalid, NULL is returned.
   *
   * See {@link FbcModelPlugin#getNumObjectives}
   */
  Objective getObjective(unsigned long n);

  /**
   * Adds a copy the given Objective to this FbcModelPlugin.
   *
   * @param {Objective} o the Objective object to add.
   */
  long addObjective(Objective o);

  /**
   * Get the number of Objective objects in this FbcModelPlugin.
   *
   * @return {number} the number of Objective objects in this FbcModelPlugin.
   */
  unsigned long getNumObjectives();

  /**
   * Creates a new Objective object, adds it to this FbcModelPlugin's
   * ListOfObjectives and returns the Objective object created.
   *
   * @return {Objective} a new Objective object instance.
   *
   * See {@link FbcModelPlugin#addObjective}
   */
  Objective createObjective();

  /**
   * Removes the nth Objective from the ListOfObjectives within this FbcModelPlugin.
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param {number} n the index of the Objective to remove.
   *
   * See {@link FbcModelPlugin#getNumObjectives}
   */
  Objective removeObjective(unsigned long n);

  /**
   * Returns the current active objective.
   *
   * @return {Objective} the Objective pointed to by the 'activeObjective'
   * attribute, or NULL if no such Objective can be found.
   */
  Objective getActiveObjective();

  /**
   * Sets the id of the active objective.
   */
  long setActiveObjectiveId(DOMString objectiveId);

  /**
   * Returns the id of the current active objective.
   *
   * @return {string} the value of the "activeObjective" attribute of the ListOfObjectives.
   */
  DOMString getActiveObjectiveId();

  /**
   * Unsets the "activeObjective" attribute of the ListOfObjectives.
   */
  long unsetActiveObjectiveId();

  /**
   * Get a GeneProduct from the ListOfGeneProducts.
   *
   * @param {number} n the index number of the GeneProduct to get
   *
   * @return {GeneProduct} the nth GeneProduct in the ListOfGeneProducts within this FbcModelPlugin.
   * If the index n is invalid, NULL is returned.
   *
   * See {@link FbcModelPlugin#getNumGeneProducts}
   */
  GeneProduct getGeneProduct(unsigned long n);

  /**
  * Get a GeneProduct from the ListOfGeneProducts
  * based on its label.
   *
  * @param {string} label a string representing the label
  * of the GeneProduct to get
  *
  * @return the GeneProduct in the ListOfGeneProducts
  * with the given label or NULL if no such
  * GeneProduct exists.
  */
  GeneProduct getGeneProductByLabel(DOMString label);

  /**
   * Adds a copy the given GeneProduct to this FbcModelPlugin.
   *
   * @param {GeneProduct} gp the GeneProduct object to add
   */
  long addGeneProduct(GeneProduct gp);

  /**
   * Get the number of GeneProduct objects in this FbcModelPlugin.
   *
   * @return the number of GeneProduct objects in this FbcModelPlugin.
   */
  unsigned long getNumGeneProducts();

  /**
   * Creates a new GeneProduct object, adds it to this FbcModelPlugin's
   * ListOfGeneProducts and returns the GeneProduct object created.
   *
   * @return {GeneProduct} a new GeneProduct object instance.
   */
  GeneProduct createGeneProduct();

  /**
   * Removes the nth GeneProduct from the ListOfGeneProducts within this FbcModelPlugin.
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param {number} n the index of the GeneProduct to remove
   */
  GeneProduct removeGeneProduct(unsigned long n);
};

FbcModelPlugin implements SBase;

/**
 * # Base extension class for the "fbc" package.
 *
 * There are currently two possible namespaces defined for the Flux Balance
 * Constraints package:
 * "http://www.sbml.org/sbml/level3/version1/fbc/version1" and
 * "http://www.sbml.org/sbml/level3/version1/fbc/version2".  Despite both
 * referencing SBML Level 3 Version 1 explicitly, both versions of
 * this package (and all such packages) can be used without change in SBML
 * Level 3 Version 2 documents.  The only caveat is that features of
 * the SBML Level 3 Version 2 specification that were not present in
 * Level 1 may not be used by constructs from the Flux Balance Constraints
 * package.
 */
[Prefix="libsbml::"]
interface FbcExtension {
  /**
   * Returns the XML namespace URI of the SBML Level 3 package
   * implemented by this libSBML extension.
   *
   * @return {string} the XML namespace as a string.
   */
  static DOMString getXmlnsL3V1V1();

  /**
   * Returns the XML namespace URI of the SBML Level 3 package
   * implemented by this libSBML extension.
   *
   * @return {string} the XML namespace as a string.
   */
  static DOMString getXmlnsL3V1V2();
};

FbcExtension implements SBase;
