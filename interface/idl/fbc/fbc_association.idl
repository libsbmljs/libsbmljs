/**
 * # Base class for FbcAnd, FbcOr, and GeneProductRef
 *
 * The FbcAssociation class is the abstract base class for the classes that
 * can be used as children of the GeneProductAssociation child of a Reaction.
 * The FbcAnd class is used when all of its children are definitely associated
 * with the Reaction; the FbcOr class is used when at least one of its children
 * are associated with the Reaction; and the GeneProductRef class is used to
 * denote a particular GeneProduct.
 */
[Prefix="libsbml::"]
interface FbcAssociation {
   /**
   * Returns true, if this abstract FbcAssociation is of type FbcAnd.
   *
   * @return {boolean} true, if this abstract FbcAssociation is of type FbcAnd.
   *
   */
  boolean isFbcAnd();


  /**
   * Returns true, if this abstract FbcAssociation is of type FbcOr.
   *
   * @return {boolean} true, if this abstract FbcAssociation is of type FbcOr.
   *
   */
  boolean isFbcOr();


  /**
   * Returns true, if this abstract FbcAssociation is of type
   * GeneProductRef.
   *
   * @return {boolean} true, if this abstract FbcAssociation is of type
   * GeneProductRef.
   *
   */
  boolean isGeneProductRef();


  /**
  * Parses a gene association in infix format and returns a corresponding
  * Association object.
  *
  * This parses a string that has a list of gene names and conjunctions
  * or disjunctions.  For example:
  *
  * ```
  * (b2422) and (b2425) and (b2423) and (b2424) or (b2422) and (b2423) and (b2424) and (b2413) and (b3917)
  * ```
  *
  * The 'and' operator takes precedence over the 'or' operator, meaning that
  * the above input string would turn into two groups of gene names: either
  * "b2422, b2425, b2423, and b2424" or "b2422, b2423, b2424, b2413, and b3917".
  * Parentheses may be added to make things more clear, and to encode
  * alternative schemes.
  *
  * This method also creates missing GeneProduct objects, in case the unique
  * reference does not yet exist.
  *
  * @param {string} association the string to parse
  * @param {FbcModelPlugin} plugin the FbcModelPlugin on which to add the geneProduct elements
  * @param {boolean} usingId boolean indicating whether the infix assumes identifiers (true)
  * or labels (false default)
  * @param {boolean} addMissingGP boolean indicating whether to add missing geneProducts
  * (true default) or not (false)
  *
  * @return {FbcAssociation} the parsed association, or NULL in case of an error.
  */
  static FbcAssociation parseFbcInfixAssociation(DOMString association, FbcModelPlugin plugin, boolean usingId, boolean addMissingGP);


  /**
  * Converts this FbcAssociation object into an infix string representation.
  *
  * @return {string} the association as infix string.
  */
  DOMString toInfix(boolean usingId);

};
