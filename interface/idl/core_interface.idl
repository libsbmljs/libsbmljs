/**
 * # An SBML parameter: a named symbol with a value.
 *
 * A Parameter is used in SBML to define a symbol associated with a value;
 * this symbol can then be used in mathematical formulas in a model.  By
 * default, parameters have constant value for the duration of a
 * simulation, and for this reason are called parameters instead of
 * variables in SBML, although it is crucial to understand that SBML
 * parameters represent both concepts.  Whether a given SBML
 * parameter is intended to be constant or variable is indicated by the
 * value of its "constant" attribute.
 *
 * SBML's Parameter has a required attribute, "id", that gives the
 * parameter a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A parameter can also have an optional
 * "name" attribute of type string.  Identifiers and names must be used
 * according to the guidelines described in the SBML specifications.
 *
 * The optional attribute "value" determines the value (of type double)
 * assigned to the parameter.  A missing value for "value" implies that
 * the value either is unknown, or to be obtained from an external source,
 * or determined by an initial assignment.  The unit of measurement
 * associated with the value of the parameter can be specified using the
 * optional attribute "units".  Here we only mention briefly some notable
 * points about the possible unit choices, but readers are urged to consult
 * the SBML specification documents for more information:
 *
 * * In SBML Level 3, there are no constraints on the units that
 * can be assigned to parameters in a model; there are also no units to
 * inherit from the enclosing Model object (unlike the case for, e.g.,
 * Species and Compartment).
 *
 * * In SBML Level 2, the value assigned to the parameter's "units"
 * attribute must be chosen from one of the following possibilities: one of
 * the base unit identifiers defined in SBML; one of the built-in unit
 * identifiers "substance", "time", "volume", "area" or
 * "length"; or the identifier of a new unit defined in the list of unit
 * definitions in the enclosing Model structure.  There are no constraints
 * on the units that can be chosen from these sets.  There are no default
 * units for parameters.
 *
 * The Parameter structure has another boolean attribute named "constant"
 * that is used to indicate whether the parameter's value can vary during a
 * simulation.  (In SBML Level 3, the attribute is mandatory and must
 * be given a value; in SBML Levels below Level 3, the attribute is
 * optional.)  A value of true indicates the parameter's value cannot be
 * changed by any construct except InitialAssignment.  Conversely, if the
 * value of "constant" is false, other constructs in SBML, such as rules
 * and events, can change the value of the parameter.
 *
 * SBML Level 3 uses a separate object class, LocalParameter, for
 * parameters that are local to a Reaction's KineticLaw.  In Levels prior
 * to SBML Level 3, the Parameter class is used both for definitions
 * of global parameters, as well as reaction-local parameters stored in a
 * list within KineticLaw objects.  Parameter objects that are local to a
 * reaction (that is, those defined within the KineticLaw structure of a
 * Reaction) cannot be changed by rules and therefore are implicitly always constant;
 * consequently, in SBML Level 2, parameter
 * definitions within Reaction structures should not have their
 * "constant" attribute set to false.
 *
 * What if a global parameter has its "constant" attribute set to false,
 * but the model does not contain any rules, events or other constructs
 * that ever change its value over time?  Although the model may be
 * suspect, this situation is not strictly an error.  A value of false
 * for "constant" only indicates that a parameter can change value, not
 * that it must.
 *
 * As with all other major SBML components, Parameter is derived from
 * SBase, and the methods defined on SBase are available on Parameter.
 *
 * **Note:** The use of the term parameter in SBML sometimes leads to
 * confusion among readers who have a particular notion of what something
 * called "parameter" should be.  It has been the source of heated debate,
 * but despite this, no one has yet found an adequate replacement term that
 * does not have different connotations to different people and hence leads
 * to confusion among some subset of users.  Perhaps it would have been
 * better to have two constructs, one called constants and the other
 * called variables.  The current approach in SBML is simply more
 * parsimonious, using a single Parameter construct with the boolean flag
 * "constant" indicating which flavor it is.  In any case, readers are
 * implored to look past their particular definition of a parameter and
 * simply view SBML's Parameter as a single mechanism for defining both
 * constants and (additional) variables in a model.  (We write
 * additional because the species in a model are usually considered to be
 * the central variables.)  After all, software tools are not required to
 * expose to users the actual names of particular SBML constructs, and
 * thus tools can present to their users whatever terms their designers
 * feel best matches their target audience.
 *
 * In SBML Level 3 Version 2, many restrictions were lifted
 * requiring only Boolean values in Boolean contexts, and numeric
 * values in numeric contexts.  This means that a Parameter may now
 * be used as a Boolean, despite canonically having a numeric value.
 * To be consistent, one should always assign it a value of true
 * or false, and use it in Boolean contexts exclusively.  It would
 * be appropriate to give it an SBO value of 602 ('Logical parameter')
 * if one chooses to do this.
 */
[Prefix="libsbml::"]
interface Parameter {
  /**
   * Gets the numerical value of this Parameter.
   *
   * @return {number} the value of the "value" attribute of this Parameter, as a
   * number of type double.
   *
   * **Note:** It is crucial that callers not blindly call
   * Parameter.getValue() without first using Parameter.isSetValue() to
   * determine whether a value has ever been set.  Otherwise, the value
   * return by Parameter::getValue() may not actually represent a value
   * assigned to the parameter.  The reason is simply that the data type
   * double in a program always has @em some value.  A separate test is
   * needed to determine whether the value is a true model value, or
   * uninitialized data in a computer's memory location.
   */
  double getValue();

  /**
   * Sets the "value" attribute of this Parameter to the given double
   * value and marks the attribute as set.
   *
   * @param {number} value a double, the value to assign
   */
  long setValue(double value);

  /**
   * Predicate returning true if the
   * "value" attribute of this Parameter is set.
   *
   * In SBML definitions after SBML Level 1 Version 1,
   * parameter values are optional and have no defaults.  If a model read
   * from a file does not contain a setting for the "value" attribute of a
   * parameter, its value is considered unset; it does not default to any
   * particular value.  Similarly, when a Parameter object is created in
   * libSBML, it has no value until given a value.  The
   * Parameter::isSetValue() method allows calling applications to
   * determine whether a given parameter's value has ever been set.
   *
   * In SBML Level 1 Version 1, parameters are required to have
   * values and therefore, the value of a Parameter <b>should always be
   * set</b>.  In Level 1 Version 2 and beyond, the value is
   * optional and as such, the "value" attribute may or may not be set.
   *
   * @return {boolean} true if the value of this Parameter is set,
   * false otherwise.
   */
  boolean isSetValue();

  /**
   * Predicate returning true if the
   * "units" attribute of this Parameter is set.
   *
   * @return {boolean} true if the "units" attribute of this Parameter is
   * set, false otherwise.
   */
  boolean isSetUnits();

  /**
   * Gets the units defined for this Parameter.
   *
   * The value of an SBML parameter's "units" attribute establishes the
   * unit of measurement associated with the parameter's value.
   *
   * @return {string} the value of the "units" attribute of this Parameter, as a
   * string.  An empty string indicates that no units have been assigned.
   */
  DOMString getUnits();

  /**
   * Sets the "units" attribute of this Parameter to a copy of the given
   * units identifier units.
   *
   * @param {number} units a string, the identifier of the units to assign to this Parameter instance
   */
  long setUnits(DOMString units);

  boolean getConstant();

  /**
   * Sets the "constant" attribute of this Parameter to the given boolean
   * flag.
   *
   * @param {number} flag a boolean, the value for the "constant" attribute of this Parameter instance
   */
  long setConstant(boolean value);

  /**
   * Predicate returning true if the
   * "constant" attribute of this Parameter is set.
   *
   * @return {boolean} true if the "constant" attribute of this Parameter is set, false otherwise
   */
  boolean isSetConstant();
};

Parameter implements SBase;

[Prefix="libsbml::"]
interface Delay {
    DOMString getId();
    boolean setId(DOMString id);

    DOMString getName();
    long setName(DOMString name);
    boolean isSetName();

    [Const] ASTNode getMath();
    long setMath(ASTNode math);
    boolean isSetMath();
};

[Prefix="libsbml::"]
interface Priority {
    DOMString getId();
    boolean setId(DOMString id);

    DOMString getName();
    long setName(DOMString name);
    boolean isSetName();

    [Const] ASTNode getMath();
    long setMath(ASTNode math);
    boolean isSetMath();
};

[Prefix="libsbml::"]
interface EventAssignment {
    DOMString getId();
    boolean setId(DOMString id);

    DOMString getName();
    long setName(DOMString name);
    boolean isSetName();

    [Const] DOMString getVariable();
    long setVariable(DOMString variable);
    boolean isSetVariable();

    [Const] ASTNode getMath();
    long setMath(ASTNode math);
    boolean isSetMath();
};

[Prefix="libsbml::"]
interface Trigger {
    DOMString getId();
    boolean setId(DOMString id);

    DOMString getName();
    long setName(DOMString name);
    boolean isSetName();

    [Const] ASTNode getMath();
    long setMath(ASTNode math);
    boolean isSetMath();

    boolean getPersistent();
    long setPersistent(boolean persistent);
    boolean isSetPersistent();
};

[Prefix="libsbml::"]
interface Event {
  DOMString getId();
  boolean setId(DOMString id);

  DOMString getName();
  long setName(DOMString name);
  boolean isSetName();

  Delay createDelay();
  Delay getDelay();
  long setDelay([Const] Delay delay);
  boolean isSetDelay();

  Priority createPriority();
  long setPriority(Priority priority);
  Priority getPriority();
  boolean isSetPriority();

  long setTrigger(Trigger trigger);
  Trigger getTrigger();
  boolean isSetTrigger();

  EventAssignment createEventAssignment();
  EventAssignment getEventAssignment(unsigned long n);
  unsigned long getNumEventAssignments();
};

[Prefix="libsbml::"]
interface FunctionDefinition {
  DOMString getId();
  boolean setId(DOMString id);

  DOMString getName();
  long setName(DOMString name);
  boolean isSetName();

  unsigned long getNumArguments();
  [Const] ASTNode getArgument(unsigned long n);

  [Const] ASTNode getBody();
  boolean isSetBody();

  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();
};

[Prefix="libsbml::"]
interface LocalParameter {
  double getValue();
  long setValue(double value);
  boolean isSetValue();

  boolean isSetUnits();
  DOMString getUnits();
  long setUnits(DOMString units);

  boolean getConstant();
  long setConstant(boolean value);
  boolean isSetConstant();
};

LocalParameter implements SBase;

[Prefix="libsbml::"]
interface KineticLaw {
  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  unsigned long getNumLocalParameters();
  LocalParameter createLocalParameter();
  LocalParameter getLocalParameter(unsigned long i);

  unsigned long getNumParameters();
  Parameter createParameter();
  Parameter getParameter(unsigned long i);

  DOMString getFormula();
  long setFormula(DOMString formula);
};

KineticLaw implements SBase;

/**
 * # A helper class for parsing Level 3 formulae
 *
 * libSBML uses the global function SBML_parseL3Formula
 * for parsing formulae, but this wrapper only exposes
 * types. This helper class can be used in lieu of SBML_parseL3Formula.
 *
 * See the [libSBML C++ docs for SBML_parseL3Formula](http://sbml.org/Software/libSBML/5.17.0/docs//cpp-api/_l3_parser_8cpp.html#a58e584e7c21801b34d79fed7a7c05ac8).
 *
 * @example
 * new libsbml.SBMLFormulaParser().parseL3Formula('S1*S2') // returns the expected AST with a product node and two leaf nodes
 */
[Prefix="libsbml::"]
interface SBMLFormulaParser {
  void SBMLFormulaParser();
  /**
   * Parses a SBML Level 3 formula. Invokes the C++ method SBML_parseL3Formula.
   *
   * @param {string} formula a string of the Level 3 formula to parse
   * @return {ASTNode} the root AST node of the formula
   */
  ASTNode parseL3Formula(DOMString formula);

  /**
   * Parses a SBML Level 1 formula. Invokes the C++ method SBML_parseFormula.
   *
   * @param {string} formula a string of the Level 1 formula to parse
   * @return {ASTNode} the root AST node of the formula
   */
  ASTNode parseFormula(DOMString formula);
};

[Prefix="libsbml::"]
interface Reaction {
  long getNumReactants();
  long getNumProducts();
  long getNumModifiers();

  SpeciesReference getReactant(long i);
  SpeciesReference getProduct(long i);
  ModifierSpeciesReference getModifier(long i);

  long addReactant(SpeciesReference sr);
  long addProduct(SpeciesReference sr);
  long addModifier(ModifierSpeciesReference sr);

  SpeciesReference createReactant();
  SpeciesReference createProduct();
  ModifierSpeciesReference createModifier();

  KineticLaw createKineticLaw();
  KineticLaw getKineticLaw();
  boolean isSetKineticLaw();

  boolean getReversible();
  long setReversible(boolean value);
  boolean isSetReversible();
};

Reaction implements SBase;

[Prefix="libsbml::"]
interface Compartment {
  boolean getConstant();
  long setConstant(boolean value);
  boolean isSetConstant();

  double getSize();
  long setSize(double val);
  boolean isSetSize();

  double getVolume();
  long setVolume(double val);
  boolean isSetVolume();

  DOMString getUnits();
  long setUnits(DOMString units);
  boolean isSetUnits();
};

Compartment implements SBase;

[Prefix="libsbml::"]
interface Rule {
  boolean isRate();
  boolean isAssignment();
  boolean isAlgebraic();

  DOMString getFormula();
  long setFormula(DOMString formula);

  boolean isParameter();
};

Rule implements SBase;

[Prefix="libsbml::"]
interface AssignmentRule {
  DOMString getVariable();
  long setVariable(DOMString id);
  boolean isSetVariable();

  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  DOMString getFormula();
  long setFormula(DOMString formula);

  boolean isParameter();
};

AssignmentRule implements SBase;

[Prefix="libsbml::"]
interface RateRule {
  DOMString getFormula();
  long setFormula(DOMString formula);

  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  boolean isParameter();
};

RateRule implements SBase;

[Prefix="libsbml::"]
interface AlgebraicRule {
  DOMString getFormula();
  long setFormula(DOMString formula);

  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  boolean isParameter();
};

AlgebraicRule implements SBase;

[Prefix="libsbmljs::"]
interface RuleSwitch {
  void RuleSwitch();

  AssignmentRule castToAssignmentRule(Rule r);
  RateRule castToRateRule(Rule r);
  AlgebraicRule castToAlgebraicRule(Rule r);
};

[Prefix="libsbml::"]
interface Model {
  unsigned long getNumReactions();
  Reaction getReaction(unsigned long i);
  Reaction createReaction();

  unsigned long getNumSpecies();
  Species createSpecies();
  Species getSpecies(unsigned long i);
  Species removeSpecies(unsigned long i);

  unsigned long getNumUnitDefinitions();
  UnitDefinition getUnitDefinition(unsigned long i);
  UnitDefinition createUnitDefinition();

  unsigned long getNumCompartments();
  Compartment getCompartment(unsigned long i);
  Compartment createCompartment();

  unsigned long getNumParameters();
  Parameter createParameter();
  Parameter getParameter(unsigned long i);

  unsigned long getNumEvents();
  Event createEvent();
  Event getEvent(unsigned long i);

  unsigned long getNumFunctionDefinitions();
  FunctionDefinition createFunctionDefinition();
  FunctionDefinition getFunctionDefinition(unsigned long i);

  unsigned long getNumRules();
  Rule getRule(unsigned long i);

  unsigned long getNumPlugins();
  SBasePlugin getPlugin(unsigned long n);
//   SBasePlugin getPlugin(DOMString name);
};

Model implements SBase;

[Prefix="libsbml::"]
interface SBMLError {
  DOMString getMessage();
};

[Prefix="libsbml::"]
interface SBMLErrorLog {
// reserved word apparently. whoop-de-doo
//   DOMString toString();
};

[Prefix="libsbml::"]
interface SBasePlugin {
  // TODO: doc
  DOMString getPackageName();

  // TODO: doc
  DOMString getPrefix();

  // TODO: doc
  DOMString getURI();
  unsigned long getVersion();
  unsigned long getLevel();
};

enum libsbml__idl__SBMLErrorCategory_t {
  "libsbml::LIBSBML_CAT_SBML",
  "libsbml::LIBSBML_CAT_SBML_L1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L2V1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L2V2_COMPAT",
  "libsbml::LIBSBML_CAT_GENERAL_CONSISTENCY",
  "libsbml::LIBSBML_CAT_IDENTIFIER_CONSISTENCY",
  "libsbml::LIBSBML_CAT_UNITS_CONSISTENCY",
  "libsbml::LIBSBML_CAT_MATHML_CONSISTENCY",
  "libsbml::LIBSBML_CAT_SBO_CONSISTENCY",
  "libsbml::LIBSBML_CAT_OVERDETERMINED_MODEL",
  "libsbml::LIBSBML_CAT_SBML_L2V3_COMPAT",
  "libsbml::LIBSBML_CAT_MODELING_PRACTICE",
  "libsbml::LIBSBML_CAT_INTERNAL_CONSISTENCY",
  "libsbml::LIBSBML_CAT_SBML_L2V4_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L3V1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L3V2_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_COMPATIBILITY"
};

[Prefix="libsbml::"]
interface SBMLDocument {
  // ctor
  void SBMLDocument(long level, long version);

  // model
  Model getModel();
  Model createModel();

  // errors
  unsigned long getNumErrors();
  [Const] SBMLError getError(unsigned long n);
  SBMLErrorLog getErrorLog();

  // level / version
  unsigned long getVersion();
  unsigned long getLevel();

  // plugins / packages
  unsigned long getNumPlugins();
  SBasePlugin getPlugin(unsigned long n);

  boolean enablePackage(DOMString pkgName, DOMString pkgPrefix, boolean flag);
  boolean disablePackage(DOMString pkgName, DOMString pkgPrefix);
  boolean isPackageEnabled(DOMString pkgName);
  long setPackageRequired(DOMString pkgName, boolean flag);

  // validation
  unsigned long checkConsistency();
  unsigned long checkInternalConsistency();
  unsigned long validateSBML();

  // compatibility checking
  unsigned long checkL1Compatibility();
  unsigned long checkL2v1Compatibility();
  unsigned long checkL2v2Compatibility();
  unsigned long checkL2v3Compatibility();
  unsigned long checkL2v4Compatibility();
  unsigned long checkL3v1Compatibility();
  unsigned long checkL3v2Compatibility();

  void setConsistencyChecks(libsbml__idl__SBMLErrorCategory_t category, boolean apply);
};

[Prefix="libsbml::"]
interface SBMLReader {
  void SBMLReader();
  SBMLDocument readSBMLFromString(DOMString sbmlstr);
};

// different name req'd b/c libsbml version did not have consistent usage of types
[Prefix="libsbml::"]
interface SBMLWriter {
  void SBMLWriter();
  // BUG in Emscripten: memory may not be freed
  ByteString writeSBMLToString(SBMLDocument doc);
};

[Prefix="libsbmljs::"]
interface Capabilities {
  void Capabilities();
  boolean isLayoutSupported();
  boolean isRenderSupported();
};
