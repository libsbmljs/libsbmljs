/**
 * # A helper class for parsing Level 3 formulae
 *
 * libSBML uses the global function SBML_parseL3Formula
 * for parsing formulae, but libsbml.js only exposes
 * C++ types, not functions. This helper class can be used in lieu of SBML_parseL3Formula.
 *
 * See the libSBML C++ docs for [SBML_parseL3Formula](http://sbml.org/Software/libSBML/5.17.0/docs//cpp-api/_l3_parser_8cpp.html#a58e584e7c21801b34d79fed7a7c05ac8).
 *
 * @example
 * new libsbml.SBMLFormulaParser().parseL3Formula('S1*S2') // returns the expected AST with a product node and two leaf nodes
 */
[Prefix="libsbml::"]
interface SBMLFormulaParser {
  void SBMLFormulaParser();
  /**
   * Parses a SBML Level 3 formula. Invokes the C++ method SBML_parseL3Formula.
   *
   * @param {string} formula a string of the Level 3 formula to parse
   * @return {ASTNode} the root AST node of the formula
   */
  ASTNode parseL3Formula(DOMString formula);

  /**
   * Parses a SBML Level 1 formula. Invokes the C++ method SBML_parseFormula.
   *
   * @param {string} formula a string of the Level 1 formula to parse
   * @return {ASTNode} the root AST node of the formula
   */
  ASTNode parseFormula(DOMString formula);
};

[Prefix="libsbml::"]
interface SBMLError {
  DOMString getMessage();
};

[Prefix="libsbml::"]
interface SBMLErrorLog {
// reserved word apparently. whoop-de-doo
//   DOMString toString();
};

[Prefix="libsbml::"]
interface SBasePlugin {
  // TODO: doc
  DOMString getPackageName();

  // TODO: doc
  DOMString getPrefix();

  // TODO: doc
  DOMString getURI();
  unsigned long getVersion();
  unsigned long getLevel();
};

enum libsbml__idl__SBMLErrorCategory_t {
  "libsbml::LIBSBML_CAT_SBML",
  "libsbml::LIBSBML_CAT_SBML_L1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L2V1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L2V2_COMPAT",
  "libsbml::LIBSBML_CAT_GENERAL_CONSISTENCY",
  "libsbml::LIBSBML_CAT_IDENTIFIER_CONSISTENCY",
  "libsbml::LIBSBML_CAT_UNITS_CONSISTENCY",
  "libsbml::LIBSBML_CAT_MATHML_CONSISTENCY",
  "libsbml::LIBSBML_CAT_SBO_CONSISTENCY",
  "libsbml::LIBSBML_CAT_OVERDETERMINED_MODEL",
  "libsbml::LIBSBML_CAT_SBML_L2V3_COMPAT",
  "libsbml::LIBSBML_CAT_MODELING_PRACTICE",
  "libsbml::LIBSBML_CAT_INTERNAL_CONSISTENCY",
  "libsbml::LIBSBML_CAT_SBML_L2V4_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L3V1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L3V2_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_COMPATIBILITY"
};

[Prefix="libsbml::"]
interface SBMLDocument {
  // ctor
  void SBMLDocument(long level, long version);

  // model
  Model getModel();
  Model createModel();

  // errors
  unsigned long getNumErrors();
  [Const] SBMLError getError(unsigned long n);
  SBMLErrorLog getErrorLog();

  // level / version
  unsigned long getVersion();
  unsigned long getLevel();

  // plugins / packages
  unsigned long getNumPlugins();
  SBasePlugin getPlugin(unsigned long n);

  boolean enablePackage(DOMString pkgName, DOMString pkgPrefix, boolean flag);
  boolean disablePackage(DOMString pkgName, DOMString pkgPrefix);
  boolean isPackageEnabled(DOMString pkgName);
  long setPackageRequired(DOMString pkgName, boolean flag);

  // validation
  unsigned long checkConsistency();
  unsigned long checkInternalConsistency();
  unsigned long validateSBML();

  // compatibility checking
  unsigned long checkL1Compatibility();
  unsigned long checkL2v1Compatibility();
  unsigned long checkL2v2Compatibility();
  unsigned long checkL2v3Compatibility();
  unsigned long checkL2v4Compatibility();
  unsigned long checkL3v1Compatibility();
  unsigned long checkL3v2Compatibility();

  void setConsistencyChecks(libsbml__idl__SBMLErrorCategory_t category, boolean apply);
};

[Prefix="libsbml::"]
interface SBMLReader {
  void SBMLReader();
  SBMLDocument readSBMLFromString(DOMString sbmlstr);
};

// different name req'd b/c libsbml version did not have consistent usage of types
[Prefix="libsbml::"]
interface SBMLWriter {
  void SBMLWriter();
  // BUG in Emscripten: memory may not be freed
  ByteString writeSBMLToString(SBMLDocument doc);
};

[Prefix="libsbmljs::"]
interface Capabilities {
  void Capabilities();
  boolean isLayoutSupported();
  boolean isRenderSupported();
};
