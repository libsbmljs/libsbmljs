enum libsbml__idl__ASTNodeType_tx {
    "libsbml::AST_PLUS"
  , "libsbml::AST_MINUS"
  , "libsbml::AST_TIMES"
  , "libsbml::AST_DIVIDE"
  , "libsbml::AST_POWER"

  , "libsbml::AST_INTEGER"
  , "libsbml::AST_REAL"
  , "libsbml::AST_REAL_E"
  , "libsbml::AST_RATIONAL"

  , "libsbml::AST_NAME"
  , "libsbml::AST_NAME_AVOGADRO"
  , "libsbml::AST_NAME_TIME"

  , "libsbml::AST_CONSTANT_E"
  , "libsbml::AST_CONSTANT_FALSE"
  , "libsbml::AST_CONSTANT_PI"
  , "libsbml::AST_CONSTANT_TRUE"

  , "libsbml::AST_LAMBDA"

  , "libsbml::AST_FUNCTION"
  , "libsbml::AST_FUNCTION_ABS"
  , "libsbml::AST_FUNCTION_ARCCOS"
  , "libsbml::AST_FUNCTION_ARCCOSH"
  , "libsbml::AST_FUNCTION_ARCCOT"
  , "libsbml::AST_FUNCTION_ARCCOTH"
  , "libsbml::AST_FUNCTION_ARCCSC"
  , "libsbml::AST_FUNCTION_ARCCSCH"
  , "libsbml::AST_FUNCTION_ARCSEC"
  , "libsbml::AST_FUNCTION_ARCSECH"
  , "libsbml::AST_FUNCTION_ARCSIN"
  , "libsbml::AST_FUNCTION_ARCSINH"
  , "libsbml::AST_FUNCTION_ARCTAN"
  , "libsbml::AST_FUNCTION_ARCTANH"
  , "libsbml::AST_FUNCTION_CEILING"
  , "libsbml::AST_FUNCTION_COS"
  , "libsbml::AST_FUNCTION_COSH"
  , "libsbml::AST_FUNCTION_COT"
  , "libsbml::AST_FUNCTION_COTH"
  , "libsbml::AST_FUNCTION_CSC"
  , "libsbml::AST_FUNCTION_CSCH"
  , "libsbml::AST_FUNCTION_DELAY"
  , "libsbml::AST_FUNCTION_EXP"
  , "libsbml::AST_FUNCTION_FACTORIAL"
  , "libsbml::AST_FUNCTION_FLOOR"
  , "libsbml::AST_FUNCTION_LN"
  , "libsbml::AST_FUNCTION_LOG"
  , "libsbml::AST_FUNCTION_PIECEWISE"
  , "libsbml::AST_FUNCTION_POWER"
  , "libsbml::AST_FUNCTION_ROOT"
  , "libsbml::AST_FUNCTION_SEC"
  , "libsbml::AST_FUNCTION_SECH"
  , "libsbml::AST_FUNCTION_SIN"
  , "libsbml::AST_FUNCTION_SINH"
  , "libsbml::AST_FUNCTION_TAN"
  , "libsbml::AST_FUNCTION_TANH"

  , "libsbml::AST_LOGICAL_AND"
  , "libsbml::AST_LOGICAL_NOT"
  , "libsbml::AST_LOGICAL_OR"
  , "libsbml::AST_LOGICAL_XOR"

  , "libsbml::AST_RELATIONAL_EQ"
  , "libsbml::AST_RELATIONAL_GEQ"
  , "libsbml::AST_RELATIONAL_GT"
  , "libsbml::AST_RELATIONAL_LEQ"
  , "libsbml::AST_RELATIONAL_LT"
  , "libsbml::AST_RELATIONAL_NEQ"

  /*, "libsbml::AST_QUALIFIER_BVAR"
  , "libsbml::AST_QUALIFIER_LOGBASE"
  , "libsbml::AST_QUALIFIER_DEGREE"

  , "libsbml::AST_SEMANTICS"

  , "libsbml::AST_CONSTRUCTOR_PIECE"
  , "libsbml::AST_CONSTRUCTOR_OTHERWISE"*/

  /*, "libsbml::AST_UNKNOWN"
  , "libsbml::AST_ORIGINATES_IN_PACKAGE"*/
  // TODO: add min/max based on libsbml version
};

[Prefix="libsbml::"]
interface ASTNode {
  long getNumChildren();
  ASTNode getChild(long i);

  libsbml__idl__ASTNodeType_t getType();

  boolean isSetUnits();
  DOMString getUnits();
  long setUnits(DOMString units);

  ByteString getName();
  long setName(ByteString name);
};

[Prefix="libsbml::"]
interface Parameter {
  double getValue();
  long setValue(double value);
  boolean isSetValue();

  boolean isSetUnits();
  DOMString getUnits();
  long setUnits(DOMString units);

  boolean getConstant();
  long setConstant(boolean value);
  boolean isSetConstant();
};

Parameter implements SBase;

[Prefix="libsbml::"]
interface Delay {
    DOMString getId();
    boolean setId(DOMString id);

    DOMString getName();
    long setName(DOMString name);
    boolean isSetName();

    [Const] ASTNode getMath();
    long setMath(ASTNode math);
    boolean isSetMath();
};

[Prefix="libsbml::"]
interface Priority {
    DOMString getId();
    boolean setId(DOMString id);

    DOMString getName();
    long setName(DOMString name);
    boolean isSetName();

    [Const] ASTNode getMath();
    long setMath(ASTNode math);
    boolean isSetMath();
};

[Prefix="libsbml::"]
interface EventAssignment {
    DOMString getId();
    boolean setId(DOMString id);

    DOMString getName();
    long setName(DOMString name);
    boolean isSetName();

    [Const] DOMString getVariable();
    long setVariable(DOMString variable);
    boolean isSetVariable();

    [Const] ASTNode getMath();
    long setMath(ASTNode math);
    boolean isSetMath();
};

[Prefix="libsbml::"]
interface Trigger {
    DOMString getId();
    boolean setId(DOMString id);

    DOMString getName();
    long setName(DOMString name);
    boolean isSetName();

    [Const] ASTNode getMath();
    long setMath(ASTNode math);
    boolean isSetMath();

    boolean getPersistent();
    long setPersistent(boolean persistent);
    boolean isSetPersistent();
};

[Prefix="libsbml::"]
interface Event {
  DOMString getId();
  boolean setId(DOMString id);

  DOMString getName();
  long setName(DOMString name);
  boolean isSetName();

  Delay createDelay();
  Delay getDelay();
  long setDelay([Const] Delay delay);
  boolean isSetDelay();

  Priority createPriority();
  long setPriority(Priority priority);
  Priority getPriority();
  boolean isSetPriority();

  long setTrigger(Trigger trigger);
  Trigger getTrigger();
  boolean isSetTrigger();

  EventAssignment createEventAssignment();
  EventAssignment getEventAssignment(unsigned long n);
  unsigned long getNumEventAssignments();
};

[Prefix="libsbml::"]
interface FunctionDefinition {
  DOMString getId();
  boolean setId(DOMString id);

  DOMString getName();
  long setName(DOMString name);
  boolean isSetName();

  unsigned long getNumArguments();
  [Const] ASTNode getArgument(unsigned long n);

  [Const] ASTNode getBody();
  boolean isSetBody();

  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();
};

[Prefix="libsbml::"]
interface LocalParameter {
  double getValue();
  long setValue(double value);
  boolean isSetValue();

  boolean isSetUnits();
  DOMString getUnits();
  long setUnits(DOMString units);

  boolean getConstant();
  long setConstant(boolean value);
  boolean isSetConstant();
};

LocalParameter implements SBase;

[Prefix="libsbml::"]
interface KineticLaw {
  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  unsigned long getNumLocalParameters();
  LocalParameter createLocalParameter();
  LocalParameter getLocalParameter(unsigned long i);

  unsigned long getNumParameters();
  Parameter createParameter();
  Parameter getParameter(unsigned long i);

  DOMString getFormula();
  long setFormula(DOMString formula);
};

KineticLaw implements SBase;

/**
 * # A helper class for parsing Level 3 formulae
 *
 * libSBML uses the global function SBML_parseL3Formula
 * for parsing formulae, but this wrapper only exposes
 * types. This helper class can be used in lieu of SBML_parseL3Formula.
 *
 * See the [libSBML C++ docs for SBML_parseL3Formula](http://sbml.org/Software/libSBML/5.17.0/docs//cpp-api/_l3_parser_8cpp.html#a58e584e7c21801b34d79fed7a7c05ac8).
 *
 * @example
 * new libsbml.SBMLFormulaParser().parseL3Formula('S1*S2') // returns the expected AST with a product node and two leaf nodes
 */
[Prefix="libsbml::"]
interface SBMLFormulaParser {
  void SBMLFormulaParser();
  /**
   * Parses a SBML Level 3 formula. Invokes the C++ method SBML_parseL3Formula.
   *
   * @param {string} formula a string of the Level 3 formula to parse
   * @return {ASTNode} the root AST node of the formula
   */
  ASTNode parseL3Formula(DOMString formula);

  /**
   * Parses a SBML Level 1 formula. Invokes the C++ method SBML_parseFormula.
   *
   * @param {string} formula a string of the Level 1 formula to parse
   * @return {ASTNode} the root AST node of the formula
   */
  ASTNode parseFormula(DOMString formula);
};

[Prefix="libsbml::"]
interface Reaction {
  long getNumReactants();
  long getNumProducts();
  long getNumModifiers();

  SpeciesReference getReactant(long i);
  SpeciesReference getProduct(long i);
  ModifierSpeciesReference getModifier(long i);

  long addReactant(SpeciesReference sr);
  long addProduct(SpeciesReference sr);
  long addModifier(ModifierSpeciesReference sr);

  SpeciesReference createReactant();
  SpeciesReference createProduct();
  ModifierSpeciesReference createModifier();

  KineticLaw createKineticLaw();
  KineticLaw getKineticLaw();
  boolean isSetKineticLaw();

  boolean getReversible();
  long setReversible(boolean value);
  boolean isSetReversible();
};

Reaction implements SBase;

[Prefix="libsbml::"]
interface Compartment {
  boolean getConstant();
  long setConstant(boolean value);
  boolean isSetConstant();

  double getSize();
  long setSize(double val);
  boolean isSetSize();

  double getVolume();
  long setVolume(double val);
  boolean isSetVolume();

  DOMString getUnits();
  long setUnits(DOMString units);
  boolean isSetUnits();
};

Compartment implements SBase;

[Prefix="libsbml::"]
interface Rule {
  boolean isRate();
  boolean isAssignment();
  boolean isAlgebraic();

  DOMString getFormula();
  long setFormula(DOMString formula);

  boolean isParameter();
};

Rule implements SBase;

[Prefix="libsbml::"]
interface AssignmentRule {
  DOMString getVariable();
  long setVariable(DOMString id);
  boolean isSetVariable();

  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  DOMString getFormula();
  long setFormula(DOMString formula);

  boolean isParameter();
};

AssignmentRule implements SBase;

[Prefix="libsbml::"]
interface RateRule {
  DOMString getFormula();
  long setFormula(DOMString formula);

  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  boolean isParameter();
};

RateRule implements SBase;

[Prefix="libsbml::"]
interface AlgebraicRule {
  DOMString getFormula();
  long setFormula(DOMString formula);

  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  boolean isParameter();
};

AlgebraicRule implements SBase;

[Prefix="libsbmljs::"]
interface RuleSwitch {
  void RuleSwitch();

  AssignmentRule castToAssignmentRule(Rule r);
  RateRule castToRateRule(Rule r);
  AlgebraicRule castToAlgebraicRule(Rule r);
};

[Prefix="libsbml::"]
interface Model {
  unsigned long getNumReactions();
  Reaction getReaction(unsigned long i);
  Reaction createReaction();

  unsigned long getNumSpecies();
  Species createSpecies();
  Species getSpecies(unsigned long i);
  Species removeSpecies(unsigned long i);

  unsigned long getNumUnitDefinitions();
  UnitDefinition getUnitDefinition(unsigned long i);
  UnitDefinition createUnitDefinition();

  unsigned long getNumCompartments();
  Compartment getCompartment(unsigned long i);
  Compartment createCompartment();

  unsigned long getNumParameters();
  Parameter createParameter();
  Parameter getParameter(unsigned long i);

  unsigned long getNumEvents();
  Event createEvent();
  Event getEvent(unsigned long i);

  unsigned long getNumFunctionDefinitions();
  FunctionDefinition createFunctionDefinition();
  FunctionDefinition getFunctionDefinition(unsigned long i);

  unsigned long getNumRules();
  Rule getRule(unsigned long i);

  unsigned long getNumPlugins();
  SBasePlugin getPlugin(unsigned long n);
//   SBasePlugin getPlugin(DOMString name);
};

Model implements SBase;

[Prefix="libsbml::"]
interface SBMLError {
  DOMString getMessage();
};

[Prefix="libsbml::"]
interface SBMLErrorLog {
// reserved word apparently. whoop-de-doo
//   DOMString toString();
};

[Prefix="libsbml::"]
interface SBasePlugin {
  // TODO: doc
  DOMString getPackageName();

  // TODO: doc
  DOMString getPrefix();

  // TODO: doc
  DOMString getURI();
  unsigned long getVersion();
  unsigned long getLevel();
};

enum libsbml__idl__SBMLErrorCategory_t {
  "libsbml::LIBSBML_CAT_SBML",
  "libsbml::LIBSBML_CAT_SBML_L1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L2V1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L2V2_COMPAT",
  "libsbml::LIBSBML_CAT_GENERAL_CONSISTENCY",
  "libsbml::LIBSBML_CAT_IDENTIFIER_CONSISTENCY",
  "libsbml::LIBSBML_CAT_UNITS_CONSISTENCY",
  "libsbml::LIBSBML_CAT_MATHML_CONSISTENCY",
  "libsbml::LIBSBML_CAT_SBO_CONSISTENCY",
  "libsbml::LIBSBML_CAT_OVERDETERMINED_MODEL",
  "libsbml::LIBSBML_CAT_SBML_L2V3_COMPAT",
  "libsbml::LIBSBML_CAT_MODELING_PRACTICE",
  "libsbml::LIBSBML_CAT_INTERNAL_CONSISTENCY",
  "libsbml::LIBSBML_CAT_SBML_L2V4_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L3V1_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_L3V2_COMPAT",
  "libsbml::LIBSBML_CAT_SBML_COMPATIBILITY"
};

[Prefix="libsbml::"]
interface SBMLDocument {
  // ctor
  void SBMLDocument(long level, long version);

  // model
  Model getModel();
  Model createModel();

  // errors
  unsigned long getNumErrors();
  [Const] SBMLError getError(unsigned long n);
  SBMLErrorLog getErrorLog();

  // level / version
  unsigned long getVersion();
  unsigned long getLevel();

  // plugins / packages
  unsigned long getNumPlugins();
  SBasePlugin getPlugin(unsigned long n);

  boolean enablePackage(DOMString pkgName, DOMString pkgPrefix, boolean flag);
  boolean disablePackage(DOMString pkgName, DOMString pkgPrefix);
  boolean isPackageEnabled(DOMString pkgName);
  long setPackageRequired(DOMString pkgName, boolean flag);

  // validation
  unsigned long checkConsistency();
  unsigned long checkInternalConsistency();
  unsigned long validateSBML();

  // compatibility checking
  unsigned long checkL1Compatibility();
  unsigned long checkL2v1Compatibility();
  unsigned long checkL2v2Compatibility();
  unsigned long checkL2v3Compatibility();
  unsigned long checkL2v4Compatibility();
  unsigned long checkL3v1Compatibility();
  unsigned long checkL3v2Compatibility();

  void setConsistencyChecks(libsbml__idl__SBMLErrorCategory_t category, boolean apply);
};

[Prefix="libsbml::"]
interface SBMLReader {
  void SBMLReader();
  SBMLDocument readSBMLFromString(DOMString sbmlstr);
};

// different name req'd b/c libsbml version did not have consistent usage of types
[Prefix="libsbml::"]
interface SBMLWriter {
  void SBMLWriter();
  // BUG in Emscripten: memory may not be freed
  ByteString writeSBMLToString(SBMLDocument doc);
};

[Prefix="libsbmljs::"]
interface Capabilities {
  void Capabilities();
  boolean isLayoutSupported();
  boolean isRenderSupported();
};
