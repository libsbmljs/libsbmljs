/**
 * Extension of SBase.
 */
[Prefix="libsbml::"]
interface ArraysSBasePlugin {
  /**
   * Get an Index from the ArraysSBasePlugin.
   *
   * @param {number} n an unsigned long representing the index of the Index to retrieve.
   *
   * @return {Index} the nth Index in the ListOfIndices within this ArraysSBasePlugin.
   */
  Index getIndex(unsigned long n);


  /**
  * Get a Index from the ArraysSBasePlugin based on the arrayIndex to which it
  * refers.
  *
  * @param {number} arrayDimension an unsigned long representing the arrayDimension attribute of the Index
  * object to retrieve.
  *
  * @return {Index} the first Index in this ArraysSBasePlugin based on the given
  * arrayDimension attribute or NULL if no such Index exists.
  */
  Index getIndexByArrayDimension(unsigned long arrayDimension);


  /**
   * Adds a copy of the given Index to this ArraysSBasePlugin.
   *
   * @param {Index} i the Index object to add.
   */
  long addIndex(Index i);


  /**
   * Get the number of Index objects in this ArraysSBasePlugin.
   *
   * @return {number} the number of Index objects in this ArraysSBasePlugin.
   */
  unsigned long getNumIndices();


  /**
   * Creates a new Index object, adds it to this ArraysSBasePlugin object and
   * returns the Index object created.
   *
   * @return {Index} a new Index object instance.
   *
   * @see addIndex(Index i)
   */
  Index createIndex();


  /**
   * Removes the nth Index from this ArraysSBasePlugin and returns a pointer to
   * it.
   *
   * @param {number} n an unsigned long representing the index of the Index to remove.
   *
   * @return {Index} a pointer to the nth Index in this ArraysSBasePlugin.
   *
   * @note the caller owns the returned object and is responsible for deleting
   * it.
   */
  Index removeIndex(unsigned long n);


  /**
   * Get a Dimension from the ArraysSBasePlugin.
   *
   * @param {number} n an unsigned long representing the index of the Dimension to
   * retrieve.
   *
   * @return {Dimension} the nth Dimension in the ListOfDimensions within this
   * ArraysSBasePlugin.
   */
  Dimension getDimension(unsigned long n);


  /**
   * Get a Dimension from the ArraysSBasePlugin based on the Size to which it
   * refers.
   *
   * @param {string} sid a string representing the size attribute of the Dimension
   * object to retrieve.
   *
   * @return {Dimension} the first Dimension in this ArraysSBasePlugin based on the given
   * size attribute or NULL if no such Dimension exists.
   */
  Dimension getDimensionBySize(DOMString sid);


  /**
  * Get a Dimension from the ArraysSBasePlugin based on the arrayDimension to which it
  * refers.
  *
  * @param {number} arrayDimension an unsigned long representing the arrayDimension attribute of the Dimension
  * object to retrieve.
  *
  * @return {Dimension} the first Dimension in this ArraysSBasePlugin based on the given
  * arrayDimension attribute or NULL if no such Dimension exists.
  */
  Dimension getDimensionByArrayDimension(unsigned long arrayDimension);


  /**
   * Adds a copy of the given Dimension to this ArraysSBasePlugin.
   *
   * @param {Dimension} d the Dimension object to add.
   */
  long addDimension(Dimension d);


  /**
   * Get the number of Dimension objects in this ArraysSBasePlugin.
   *
   * @return {number} the number of Dimension objects in this ArraysSBasePlugin.
   */
  unsigned long getNumDimensions();


  /**
   * Creates a new Dimension object, adds it to this ArraysSBasePlugin object
   * and returns the Dimension object created.
   *
   * @return {Dimension} a new Dimension object instance.
   */
  Dimension createDimension();


  /**
   * Removes the nth Dimension from this ArraysSBasePlugin and returns a
   * pointer to it.
   *
   * @param n an unsigned long representing the index of the Dimension to
   * remove.
   *
   * @return {Dimension} a pointer to the nth Dimension in this ArraysSBasePlugin.
   *
   * @note the caller owns the returned object and is responsible for deleting
   * it.
   */
  Dimension removeDimension(unsigned long n);
};

ArraysSBasePlugin implements SBasePlugin;
