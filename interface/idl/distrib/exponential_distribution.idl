/**
 * # DistribExponentialDistribution
 */
[Prefix="libsbml::"]
interface DistribExponentialDistribution {
  /**
   * Creates a new DistribExponentialDistribution using the given SBML Level,
   * Version and "distrib" package version.
   *
   * @param {number} level an unsigned int, the SBML Level to assign to this
   * DistribUncertStatisticSpan.
   *
   * @param {number} version an unsigned int, the SBML Version to assign to this
   * DistribUncertStatisticSpan.
   *
   * @param {number} pkgVersion an unsigned int, the SBML Distrib Version to assign to
   * this DistribUncertStatisticSpan.
   */
  void DistribExponentialDistribution(unsigned long level, unsigned long version, unsigned long pkgVersion);

  /**
   * Returns the value of the "rate" element of this
   * DistribExponentialDistribution.
   *
   * @return {DistribUncertValue} the value of the "rate" element of this
   * DistribExponentialDistribution as a DistribUncertValue.
   */
  DistribUncertValue getRate();


  /**
   * Predicate returning @c true if this DistribExponentialDistribution's
   * "rate" element is set.
   *
   * @return {boolean} @c true if this DistribExponentialDistribution's "rate" element
   * has been set, otherwise @c false is returned.
   */
  boolean isSetRate();


  /**
   * Sets the value of the "rate" element of this
   * DistribExponentialDistribution.
   *
   * @param {DistribUncertValue} rate DistribUncertValue value of the "rate" element to be set.
   */
  long setRate(DistribUncertValue rate);


  /**
   * Creates a new DistribUncertValue object, adds it to this
   * DistribExponentialDistribution object and returns the DistribUncertValue
   * object created.
   *
   * @return {DistribUncertValue} a new DistribUncertValue object instance.
   */
  DistribUncertValue createRate();


  /**
   * Unsets the value of the "rate" element of this
   * DistribExponentialDistribution.
   */
  long unsetRate();
};

DistribExponentialDistribution implements DistribContinuousUnivariateDistribution;
