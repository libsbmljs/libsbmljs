/**
 * # DistribContinuousUnivariateDistribution
 */
[Prefix="libsbml::"]
interface DistribContinuousUnivariateDistribution {
  /**
   * Creates a new DistribContinuousUnivariateDistribution using the given SBML Level,
   * Version and "distrib" package version.
   *
   * @param {number} level an unsigned int, the SBML Level to assign to this
   * DistribUncertStatisticSpan.
   *
   * @param {number} version an unsigned int, the SBML Version to assign to this
   * DistribUncertStatisticSpan.
   *
   * @param {number} pkgVersion an unsigned int, the SBML Distrib Version to assign to
   * this DistribUncertStatisticSpan.
   */
  void DistribContinuousUnivariateDistribution(unsigned long level, unsigned long version, unsigned long pkgVersion);

  /**
   * Returns the value of the "truncationLowerBound" element of this
   * DistribContinuousUnivariateDistribution.
   *
   * @return {DistribUncertBound} the value of the "truncationLowerBound" element of this
   * DistribContinuousUnivariateDistribution as a DistribUncertBound.
   */
  DistribUncertBound getTruncationLowerBound();


  /**
   * Returns the value of the "truncationUpperBound" element of this
   * DistribContinuousUnivariateDistribution.
   *
   * @return {DistribUncertBound} the value of the "truncationUpperBound" element of this
   * DistribContinuousUnivariateDistribution as a DistribUncertBound.
   */
  DistribUncertBound getTruncationUpperBound();


  /**
   * Predicate returning true if this
   * DistribContinuousUnivariateDistribution's "truncationLowerBound" element
   * is set.
   *
   * @return {boolean} true if this DistribContinuousUnivariateDistribution's
   * "truncationLowerBound" element has been set, otherwise false is
   * returned.
   */
  boolean isSetTruncationLowerBound();


  /**
   * Predicate returning true if this
   * DistribContinuousUnivariateDistribution's "truncationUpperBound" element
   * is set.
   *
   * @return {boolean} true if this DistribContinuousUnivariateDistribution's
   * "truncationUpperBound" element has been set, otherwise false is
   * returned.
   */
  boolean isSetTruncationUpperBound();


  /**
   * Sets the value of the "truncationLowerBound" element of this
   * DistribContinuousUnivariateDistribution.
   *
   * @param {DistribUncertBound} truncationLowerBound DistribUncertBound value of the
   * "truncationLowerBound" element to be set.
   */
  long setTruncationLowerBound(DistribUncertBound truncationLowerBound);


  /**
   * Sets the value of the "truncationUpperBound" element of this
   * DistribContinuousUnivariateDistribution.
   *
   * @param {DistribUncertBound} truncationUpperBound DistribUncertBound value of the
   * "truncationUpperBound" element to be set.
   */
  long setTruncationUpperBound(DistribUncertBound truncationUpperBound);


  /**
   * Creates a new DistribUncertBound object, adds it to this
   * DistribContinuousUnivariateDistribution object and returns the
   * DistribUncertBound object created.
   *
   * @return {DistribUncertBound} a new DistribUncertBound object instance.
   */
  DistribUncertBound createTruncationLowerBound();


  /**
   * Creates a new DistribUncertBound object, adds it to this
   * DistribContinuousUnivariateDistribution object and returns the
   * DistribUncertBound object created.
   *
   * @return {DistribUncertBound} a new DistribUncertBound object instance.
   */
  DistribUncertBound createTruncationUpperBound();


  /**
   * Unsets the value of the "truncationLowerBound" element of this
   * DistribContinuousUnivariateDistribution.
   */
  long unsetTruncationLowerBound();


  /**
   * Unsets the value of the "truncationUpperBound" element of this
   * DistribContinuousUnivariateDistribution.
   */
  long unsetTruncationUpperBound();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribBetaDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribBetaDistribution, false otherwise
   */
  boolean isDistribBetaDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribCauchyDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribCauchyDistribution, false otherwise
   */
  boolean isDistribCauchyDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribChiSquareDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribChiSquareDistribution, false otherwise
   */
  boolean isDistribChiSquareDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribExponentialDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribExponentialDistribution, false otherwise
   */
  boolean isDistribExponentialDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type DistribFDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribFDistribution, false otherwise
   */
  boolean isDistribFDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribGammaDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribGammaDistribution, false otherwise
   */
  boolean isDistribGammaDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribInverseGammaDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribInverseGammaDistribution, false otherwise
   */
  boolean isDistribInverseGammaDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribLaPlaceDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribLaPlaceDistribution, false otherwise
   */
  boolean isDistribLaPlaceDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribLogNormalDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribLogNormalDistribution, false otherwise
   */
  boolean isDistribLogNormalDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribLogisticDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribLogisticDistribution, false otherwise
   */
  boolean isDistribLogisticDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribNormalDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribNormalDistribution, false otherwise
   */
  boolean isDistribNormalDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribParetoDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribParetoDistribution, false otherwise
   */
  boolean isDistribParetoDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribRayleighDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribRayleighDistribution, false otherwise
   */
  boolean isDistribRayleighDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribStudentTDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribStudentTDistribution, false otherwise
   */
  boolean isDistribStudentTDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribUniformDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribUniformDistribution, false otherwise
   */
  boolean isDistribUniformDistribution();


  /**
   * Predicate returning true if this abstract
   * "DistribContinuousUnivariateDistribution" is of type
   * DistribWeibullDistribution
   *
   * @return {boolean} true if this abstract "DistribContinuousUnivariateDistribution"
   * is of type DistribWeibullDistribution, false otherwise
   */
  boolean isDistribWeibullDistribution();
};

DistribContinuousUnivariateDistribution implements DistribUnivariateDistribution;
