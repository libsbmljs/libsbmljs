/**
 * # DistribUncertValue
 */
[Prefix="libsbml::"]
interface DistribUncertValue {
  /**
   * Creates a new DistribUncertValue using the given SBML Level, Version and
   * "distrib" package version.
   *
   * @param {number} level an unsigned int, the SBML Level to assign to this
   * DistribUncertValue.
   *
   * @param {number} version an unsigned int, the SBML Version to assign to this
   * DistribUncertValue.
   *
   * @param {number} pkgVersion an unsigned int, the SBML Distrib Version to assign to
   * this DistribUncertValue.
   */
  void DistribUncertValue(unsigned long level, unsigned long version, unsigned long pkgVersion);

  /**
   * Returns the value of the "value" attribute of this DistribUncertValue.
   *
   * @return {number} the value of the "value" attribute of this DistribUncertValue as a
   * double.
   */
  double getValue();


  /**
   * Returns the value of the "var" attribute of this DistribUncertValue.
   *
   * @return {string} the value of the "var" attribute of this DistribUncertValue as a
   * string.
   */
  DOMString getVar();


  /**
   * Returns the value of the "units" attribute of this DistribUncertValue.
   *
   * @return {string} the value of the "units" attribute of this DistribUncertValue as a
   * string.
   */
  DOMString getUnits();


  /**
   * Predicate returning true if this DistribUncertValue's "value" attribute
   * is set.
   *
   * @return {boolean} true if this DistribUncertValue's "value" attribute has been
   * set, otherwise false is returned.
   */
  boolean isSetValue();


  /**
   * Predicate returning true if this DistribUncertValue's "var" attribute
   * is set.
   *
   * @return {boolean} true if this DistribUncertValue's "var" attribute has been set,
   * otherwise false is returned.
   */
  boolean isSetVar();


  /**
   * Predicate returning true if this DistribUncertValue's "units" attribute
   * is set.
   *
   * @return {boolean} true if this DistribUncertValue's "units" attribute has been
   * set, otherwise false is returned.
   */
  boolean isSetUnits();


  /**
   * Sets the value of the "value" attribute of this DistribUncertValue.
   *
   * @param {number} value double value of the "value" attribute to be set.
   */
  long setValue(double value);


  /**
   * Sets the value of the "var" attribute of this DistribUncertValue.
   *
   * @param {string} var std::string& value of the "var" attribute to be set.
   */
  long setVar(DOMString var);


  /**
   * Sets the value of the "units" attribute of this DistribUncertValue.
   *
   * @param {string} units std::string& value of the "units" attribute to be set.
   */
  long setUnits(DOMString units);


  /**
   * Unsets the value of the "value" attribute of this DistribUncertValue.
   */
  long unsetValue();


  /**
   * Unsets the value of the "var" attribute of this DistribUncertValue.
   */
  long unsetVar();


  /**
   * Unsets the value of the "units" attribute of this DistribUncertValue.
   */
  long unsetUnits();


  /**
   * Predicate returning true if this abstract "DistribUncertValue" is of
   * type DistribUncertBound
   *
   * @return {boolean} true if this abstract "DistribUncertValue" is of type
   * DistribUncertBound, false otherwise
   */
  boolean isDistribUncertBound();


  /**
   * Predicate returning true if this abstract "DistribUncertValue" is of
   * type DistribExternalParameter
   *
   * @return {boolean} true if this abstract "DistribUncertValue" is of type
   * DistribExternalParameter, false otherwise
   */
  boolean isDistribExternalParameter();
};

DistribUncertValue implements DistribBase;
