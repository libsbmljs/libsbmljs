/**
 * # A delay on the time of execution of an SBML event.
 *
 * An Event object defines when the event can occur, the variables that
 * are affected by the event, and how the variables are affected.  The
 * effect of the event can optionally be delayed after the occurrence of
 * the condition which invokes it.  An event delay is defined using an
 * object of class Delay.
 *
 * The object class Delay is derived from SBase and adds a single
 * subelement called "math".  This subelement is used to hold MathML
 * content.  The mathematical formula represented by "math" must evaluate
 * to a numerical value.  It is used as the length of time between when the
 * event is triggered and when the event's assignments are
 * actually executed.  If no delay is present on a given Event, a time
 * delay of zero is assumed.
 *
 * The expression in "math" must be evaluated at the time the event is
 * triggered.  The expression must always evaluate to a nonnegative number
 * (otherwise, a nonsensical situation could arise where an event is
 * defined to execute before it is triggered!).
 *
 * ## The units of the mathematical expression in a Delay
 *
 * In SBML Level 2 versions before Version 4, the units of the
 * numerical value computed by the Delay's "math" expression are
 * required to be in units of time, or the model is considered to have a
 * unit consistency error.  In Level 2 Version 4 as well as SBML
 * Level 3, this requirement is relaxed; these
 * specifications only stipulate that the units of the numerical value
 * computed by a Delay instance's "math" expression should match the
 * model's units of time (meaning the definition of the time units in
 * the model).  LibSBML respects these requirements, and depending on
 * whether an earlier Version of SBML Level 2 is in use, libSBML may
 * or may not flag unit inconsistencies as errors or merely warnings.
 *
 * Note that units are not predefined or assumed for the contents
 * of "math" in a Delay object; rather, they must be defined explicitly for
 * each instance of a Delay object in a model.  This is an important point
 * to bear in mind when literal numbers are used in delay expressions.  For
 * example, the following Event instance would result in a warning logged
 * by SBMLDocument::checkConsistency() about the fact that libSBML cannot
 * verify the consistency of the units of the expression.  The reason is
 * that the formula inside the "math" element does not have any declared
 * units, whereas what is expected in this context is units of time:
 *
 * ```
 * <model>
 *     ...
 *     <listOfEvents>
 *         <event useValuesFromTriggerTime="true">
 *             ...
 *             <delay>
 *                 <math xmlns="http://www.w3.org/1998/Math/MathML">
 *                     <cn> 1 </cn>
 *                 </math>
 *             </delay>
 *             ...
 *         </event>
 *     </listOfEvents>
 *     ...
 * </model>
 * ```
 *
 * The `<cn> 1 </cn>` within the mathematical formula
 * of the delay above has no units declared.  To make the
 * expression have the needed units of time, literal numbers should be
 * avoided in favor of defining Parameter objects for each quantity, and
 * declaring units for the Parameter values.  The following fragment of
 * SBML illustrates this approach:
 *
 * ```
 * <model>
 *    ...
 *    <listOfParameters>
 *        <parameter id="transcriptionDelay" value="10" units="second"/>
 *    </listOfParameters>
 *    ...
 *    <listOfEvents>
 *        <event useValuesFromTriggerTime="true">
 *            ...
 *            <delay>
 *                <math xmlns="http://www.w3.org/1998/Math/MathML">
 *                    <ci> transcriptionDelay </ci>
 *                </math>
 *            </delay>
 *            ...
 *        </event>
 *    </listOfEvents>
 *    ...
 * </model>
 * ```
 *
 * In SBML Level 3, an alternative approach is available in the form
 * of the units attribute, which SBML Level 3 allows to appear on
 * MathML cn elements.  The value of this attribute can be used to
 * indicate the unit of measurement to be associated with the number in the
 * content of a cn element.  The attribute is named units but,
 * because it appears inside MathML element (which is in the XML namespace
 * for MathML and not the namespace for SBML), it must always be prefixed
 * with an XML namespace prefix for an SBML Level 3
 * namespace.  The following is an example of this approach:
 *
 * ```
 * <model timeUnits="second" ...>
 *    ...
 *    <listOfEvents>
 *        <event useValuesFromTriggerTime="true">
 *            ...
 *            <delay>
 *                <math xmlns="http://www.w3.org/1998/Math/MathML"
 *                      xmlns:sbml="http://www.sbml.org/sbml/level3/version1/core">
 *                    <cn sbml:units="second"> 10 </cn>
 *                </math>
 *            </delay>
 *            ...
 *        </event>
 *    </listOfEvents>
 *    ...
 * </model>
 * ```
 *
 * ## Restrictions relaxed in SBML Level 3 Version 2
 *
 * In SBML Level 3 Version 2, the requirement that a Delay
 * have a "math" subelement was relaxed, making it optional.  In
 * this case, the Delay remains undefined, and unless that information
 * is provided in some other form (such as with an SBML Level 3
 * package), the Event behaves as if it had no Delay.
 */
[Prefix="libsbml::"]
interface Delay {
  /**
   * Get the mathematical formula for the delay and return it
   * as an AST.
   *
   * @return {ASTNode} the math of this Delay, or NULL if the math is not set
   */
  [Const] ASTNode getMath();

  /**
   * Sets the delay expression of this Delay instance to a copy of the given
   * ASTNode.
   *
   * @param {ASTNode} math an ASTNode representing a formula tree
   */
  long setMath(ASTNode math);

  /**
   * Predicate to test whether the formula for this delay is set.
   *
   * @return {boolean} true if the formula (meaning the math subelement) of
   * this Delay is set, false otherwise
   */
  boolean isSetMath();
};

Delay implements SBase;

/**
 * # The priority of execution of an SBML event.
 *
 * The Priority object class (which was introduced in SBML Level 3
 * Version 1), like Delay, is derived from SBase and contains a MathML
 * formula stored in the element "math".  This formula is used to compute a
 * dimensionless numerical value that influences the order in which a
 * simulator is to perform the assignments of two or more events that
 * happen to be executed simultaneously.  The formula may evaluate to any
 * double value (and thus may be a positive or negative number, or
 * zero), with positive numbers taken to signifying a higher priority than
 * zero or negative numbers.  If no Priority object is present on a given
 * Event object, no priority is defined for that event.
 *
 * ## The interpretation of priorities on events in a model
 *
 * For the purposes of SBML, simultaneous event execution is
 * defined as the situation in which multiple events have identical
 * times of execution.  The time of execution is calculated as the
 * sum of the time at which a given event's Trigger is triggered
 * plus its Delay duration, if any.  Here, identical times means
 * mathematically equal instants in time.  (In practice,
 * simulation software adhering to this specification may have to
 * rely on numerical equality instead of strict mathematical
 * equality; robust models will ensure that this difference will not
 * cause significant discrepancies from expected behavior.)
 *
 * If no Priority subobjects are defined for two or more Event objects,
 * then those events are still executed simultaneously but their order of
 * execution is undefined by the SBML Level 3
 * specification.  A software implementation may choose to execute
 * such simultaneous events in any order, as long as each event is executed
 * only once and the requirements of checking the "persistent" attribute
 * (and acting accordingly) are satisfied.
 *
 * If Priority subobjects are defined for two or more
 * simultaneously-triggered events, the order in which those particular
 * events must be executed is dictated by their Priority objects,
 * as follows.  If the values calculated using the two Priority
 * objects' "math" expressions differ, then the event having
 * the higher priority value must be executed before the event with
 * the lower value.  If, instead, the two priority values are
 * mathematically equal, then the two events must be triggered in a
 * random order.  It is important to note that a random
 *   order is not the same as an undefined order: given multiple
 * runs of the same model with identical conditions, an undefined
 * ordering would permit a system to execute the events in (for
 * example) the same order every time (according to whatever scheme
 * may have been implemented by the system), whereas the explicit
 * requirement for random ordering means that the order of execution
 * in different simulation runs depends on random chance.  In other
 * words, given two events A and B, a randomly-determined
 * order must lead to an equal chance of executing A first or
 * B first, every time those two events are executed
 * simultaneously.
 *
 * A model may contain a mixture of events, some of which have
 * Priority subobjects and some do not.  Should a combination of
 * simultaneous events arise in which some events have priorities
 * defined and others do not, the set of events with defined
 * priorities must trigger in the order determined by their Priority
 * objects, and the set of events without Priority objects must be
 * executed in an undefined order with respect to each other
 * and with respect to the events with Priority subobjects.  (Note
 * that undefined order does not necessarily mean random
 * order, although a random ordering would be a valid implementation
 * of this requirement.)
 *
 * The following example may help further clarify these points.
 * Suppose a model contains four events that should be executed
 * simultaneously, with two of the events having Priority objects
 * with the same value and the other two events having Priority
 * objects with the same, but different, value.  The two events with
 * the higher priorities must be executed first, in a random order
 * with respect to each other, and the remaining two events must be
 * executed after them, again in a random order, for a total of four
 * possible and equally-likely event executions: A-B-C-D, A-B-D-C,
 * B-A-C-D, and B-A-D-C.  If, instead, the model contains four events
 * all having the same Priority values, there are 4! or 24
 * possible orderings, each of which must be equally likely to be
 * chosen.  Finally, if none of the four events has a Priority
 * subobject defined, or even if exactly one of the four events has a
 * defined Priority, there are again 24 possible orderings, but the
 * likelihood of choosing any particular ordering is undefined; the
 * simulator can choose between events as it wishes.  (The SBML
 * specification only defines the effects of priorities on Event
 * objects with respect to other Event objects with
 * priorities.  Putting a priority on a single Event object
 * in a model does not cause it to fall within that scope.)
 *
 * ## Evaluation of Priority expressions
 *
 * An event's Priority object "math" expression must be
 * evaluated at the time the Event is to be executed.  During
 * a simulation, all simultaneous events have their Priority values
 * calculated, and the event with the highest priority is selected for
 * next execution.  Note that it is possible for the execution of one
 * Event object to cause the Priority value of another
 * simultaneously-executing Event object to change (as well as to
 * trigger other events, as already noted).  Thus, after executing
 * one event, and checking whether any other events in the model have
 * been triggered, all remaining simultaneous events that
 * either (i) have Trigger objects with attributes
 * "persistent"=false or (ii) have Trigger
 * expressions that did not transition from true to
 * false, must have their Priority expression reevaluated.
 * The highest-priority remaining event must then be selected for
 * execution next.
 *
 * ## Units of Priority object's mathematical expressions
 *
 * The unit associated with the value of a Priority object's
 * "math" expression should be dimensionless.  This is
 * because the priority expression only serves to provide a relative
 * ordering between different events, and only has meaning with
 * respect to other Priority object expressions.  The value of
 * Priority objects is not comparable to any other kind of object in
 * an SBML model.
 *
 * **Note:** The Priority construct exists only in SBML Level 3; it cannot
 * be used in SBML Level 2 or Level 1 models.
 *
 * ## Restrictions relaxed in SBML Level 3 Version 2
 *
 * In SBML Level 3 Version 2, the requirement that a Priority
 * have a "math" subelement was relaxed, making it optional.  In
 * this case, the Priority remains undefined, and unless that information
 * is provided in some other form (such as with an SBML Level 3
 * package), the Event behaves as if it had no Priority.
 */
[Prefix="libsbml::"]
interface Priority {
  /**
   * Get the mathematical formula for the priority and return it
   * as an AST.
   *
   * @return {ASTNode} the math of this Priority, or NULL if the math is not set
   */
  [Const] ASTNode getMath();

  /**
   * Sets the math expression of this Priority instance to a copy of the given
   * ASTNode.
   *
   * @param {ASTNode} math an ASTNode representing a formula tree
   */
  long setMath(ASTNode math);

  /**
   * Predicate to test whether the formula for this delay is set.
   *
   * @return {boolean} true if the formula (meaning the math subelement) of
   * this Priority is set, false otherwise
   */
  boolean isSetMath();
};

Priority implements SBase;

/**
 * # An assignment to a variable by an SBML event.
 *
 * Event contains an optional element called "listOfEventAssignments", of
 * class ListOfEventAssignments.  In every instance of an event definition
 * in a model, the object's "listOfEventAssignments" element must have a
 * non-empty list of one or more "eventAssignment" elements of class
 * EventAssignment.  The object class EventAssignment has one required
 * attribute, "variable", and a required element, "math".  Being derived
 * from SBase, it also has all the usual attributes and elements of its
 * parent class.
 *
 * An Event object defines when the event can occur, the variables that are
 * affected by the event, and how the variables are affected.  The purpose
 * of the EventAssignment object class is to define how variables are
 * affected by an Event.  In SBML Level 2, every Event object instance
 * must have a nonempty list of event assignments; in SBML Level 3,
 * the list of assignments is optional.
 *
 * The operation of an Event is divided into two phases (regardless of
 * whether a delay is involved): one phase when the event is triggered,
 * and the other when the event is executed.   EventAssignment objects
 * are interpreted when an event is executed.  The effects are described
 * below.
 *
 * ## The attribute "variable"
 *
 * The EventAssignment attribute "variable" must be the identifier of an
 * existing Compartment, Species, SpeciesReference, or Parameter
 * instance defined in the model.  In SBML Level 3 Version 2,
 * this list was expanded to include identifiers of SBML Level 3
 * package variables that have both mathematical meaning and the
 * ability to be assigned.  When the event is executed, the value of
 * the model component identified by "variable" is changed by the
 * EventAssignment to the value computed by the "math" element; that is, a
 * species' quantity, species reference's stoichiometry, compartment's size
 * or parameter's value are reset to the value computed by "math".
 *
 * Certain restrictions are placed on what can appear in "variable":
 *
 * * The object identified by the value of the EventAssignment attribute
 * "variable" must not have its "constant" attribute set to or default to
 * true.  (Constants cannot be affected by events.)
 *
 * * The "variable" attribute must not contain the identifier of a
 * reaction.  In SBML Level 2 and SBML Level 3 Version 1,
 * only species, species references, compartment and parameter
 * values may be set by an Event.  In SBML Level 3 Version 2,
 * the "variable" attribute may also be the identifier of an SBML
 * Level 3 package element with mathematical meaning and the
 * ability to be assigned a value.  This situation may only arise if
 * the SBML package is present in the SBML document with a
 * package:required attribute of true
 *
 * * The value of every "variable" attribute must be unique among the set
 * of EventAssignment structures within a given Event structure.  In other
 * words, a single event cannot have multiple EventAssignment objects
 * assigning the same variable.  (All of them would be performed at the
 * same time when that particular Event triggers, resulting in
 * indeterminacy.)  However, separate Event instances can refer to the
 * same variable.
 *
 * * A variable cannot be assigned a value in an EventAssignment object
 * instance and also be assigned a value by an AssignmentRule; i.e., the
 * value of an EventAssignment's "variable" attribute cannot be the same as
 * the value of a AssignmentRule' "variable" attribute.  (Assignment rules
 * hold at all times, therefore it would be inconsistent to also define an
 * event that reassigns the value of the same variable.)
 *
 *
 * If the variable attribute of an EventAssignment object references an
 * object in an SBML namespace that is not understood by the interpreter
 * reading a given SBML document (that is, if the object is defined by an
 * SBML Level 3 package that the software does not support), the
 * event assignment must be ignored--the object's value will not need to
 * be set, as the interpreter could not understand that package. If an
 * interpreter cannot establish whether a referenced object is missing
 * from the model or instead is defined in an SBML namespace not
 * understood by the interpreter, it may produce a warning to the user.
 * (The latter situation may only arise if an SBML package is present in
 * the SBML document with a package:required attribute of "true".)
 *
 * Note that the time of assignment of the object identified by the
 * value of the "variable" attribute is always the time at which the Event
 * is executed, not when it is triggered.  The timing is
 * controlled by the optional Delay in an Event.  The time of
 * assignment is not affected by the "useValuesFromTriggerTime"
 * attribute on Event---that attribute affects the time at which the
 * EventAssignment's "math" expression is evaluated.  In other
 * words, SBML allows decoupling the time at which the
 * "variable" is assigned from the time at which its value
 * expression is calculated.
 *
 * ## The "math" subelement in an EventAssignment
 *
 * The MathML expression contained in an EventAssignment defines the new
 * value of the variable being assigned by the Event.
 *
 * As mentioned above, the time at which the expression in "math" is
 * evaluated is determined by the attribute "useValuesFromTriggerTime" on
 * Event.  If the attribute value is true, the expression must be
 * evaluated when the event is triggered; more precisely, the values of
 * identifiers occurring in MathML `<ci>` elements in the
 * EventAssignment's "math" expression are the values they have at the
 * point when the event triggered.  If, instead,
 * "useValuesFromTriggerTime"'s value is false, it means the values at
 * execution time should be used; that is, the values of identifiers
 * occurring in MathML `<ci>` elements in the
 * EventAssignment's "math" expression are the values they have at the
 * point when the event executed.
 *
 * ## SBML Level/Version differences
 *
 * Between Version 4 and previous versions of SBML Level 2, the
 * requirements regarding the matching of units between an
 * EvengAssignment's formula and the units of the object identified by the
 * "variable" attribute changed.  Previous versions required consistency,
 * but in SBML Level 2 Version 4 and in SBML Level 3, unit
 * consistency is only recommended.  More precisely:
 *
 *
 * * In the case of a species, an EventAssignment sets the referenced
 * species' quantity (concentration or amount of substance) to the value
 * determined by the formula in the EventAssignment's "math" subelement.
 * The units of the "math" formula should (in SBML Level 2
 * Version 4 and in Level 3) or must (in previous Versions of
 * Level 2) be identical to the units of the species.
 *
 * * (SBML Level 3 only.) In the case of a species reference, an
 * EventAssignment sets the stoichiometry of the reactant or product
 * referenced by the SpeciesReference object to the value determined by the
 * formula in the "math" element.  The unit associated with the value
 * produced by the "math" formula should be dimensionless, because
 * reactant and product stoichiometries in reactions are dimensionless
 * quantities.
 *
 * * In the case of a compartment, an EventAssignment sets the
 * referenced compartment's size to the size determined by the formula in
 * the "math" subelement of the EventAssignment.  The overall units of the
 * formula should (in SBML Level 2 Version 4 and in Level 3)
 * or must (in previous Versions of Level 2) be identical to the units
 * specified for the size of the compartment identified by the
 * EventAssignment's "variable" attribute.
 *
 * * In the case of a parameter, an EventAssignment sets the referenced
 * parameter's value to that determined by the formula in "math".  The
 * overall units of the formula should (in SBML Level 2 Version 4
 * and Level 3) or must (in previous Versions of Level 2) be
 * identical to the units defined for the parameter.
 *
 * * (For SBML Level 3 Version 2 only) In the case of
 * an object from an SBML Level 3 package, an EventAssignment sets
 * the referenced object's value (as defined by that package) to the
 * value of the formula in "math". The unit of measurement associated
 * with the value produced by the formula should be the same as that
 * object's units attribute value (if it has such an attribute), or be
 * equal to the units of model components of that type (if objects of
 * that class are defined by the package as having the same units).
 *
 *
 * Note that the formula placed in the "math" element has no assumed
 * units.  The consistency of the units of the formula, and the units
 * of the entity which the assignment affects, must be explicitly
 * established just as in the case of the value of the Delay subelement.
 * An approach similar to the one discussed in the context of Delay may be
 * used for the formula of an EventAssignment.
 *
 * ## Restrictions relaxed in SBML Level 3 Version 2
 *
 * In SBML Level 3 Version 2, the requirement that an EventAssignment
 * have a "math" subelement was relaxed, making it optional.  In
 * this case, the EventAssignment remains undefined, and unless that information
 * is provided in some other form (such as with an SBML Level 3
 * package), the Event behaves as if it had no EventAssignment.
 */
[Prefix="libsbml::"]
interface EventAssignment {
  /**
   * Get the value of this EventAssignment's "variable" attribute.
   *
   * @return {string} the identifier stored in the "variable" attribute of this
   * EventAssignment
   */
  [Const] DOMString getVariable();

  /**
   * Sets the attribute "variable" of this EventAssignment to a copy of
   * the given identifier string.
   *
   * @param {string} sid the identifier of an element defined in this model that
   * can vary over time
   */
  long setVariable(DOMString variable);

  /**
   * Predicate for testing whether the attribute "variable" of this
   * EventAssignment is set.
   *
   * @return {boolean} true if the "variable" attribute of this EventAssignment
   * is set, false otherwise.
   */
  boolean isSetVariable();

  /**
   * Unsets the attribute "variable" of this EventAssignment
   */
  long unsetVariable();

  /**
   * Get the mathematical expression in this EventAssignment's "math"
   * subelement.
   *
   * @return {ASTNode} the top ASTNode of an abstract syntax tree representing the
   * mathematical formula in this EventAssignment, or NULL if the math is not set.
   */
  [Const] ASTNode getMath();

  /**
   * Sets the "math" subelement of this EventAssignment to a copy of the
   * given ASTNode.
   *
   * @param {ASTNode} math an ASTNode that will be copied and stored as the
   * mathematical formula for this EventAssignment.
   */
  long setMath(ASTNode math);

  /**
   * Predicate for testing whether the "math" subelement of this
   * EventAssignment is set.
   *
   * @return {boolean} true if this EventAssignment has a "math" subelement,
   * false otherwise.
   */
  boolean isSetMath();
};

EventAssignment implements SBase;

/**
 * # The trigger expression for an SBML event.
 *
 * An Event object defines when the event can occur, the variables that are
 * affected by the event, and how the variables are affected.  The Trigger
 * construct in SBML is used to define a mathematical expression that
 * determines when an Event is triggered.
 *
 * A Trigger object in SBML Level 2 and Level 3 contains one
 * subelement named "math" containing a MathML expression.  The expression
 * is evaluated as a value of type boolean.  The exact moment at which
 * the expression evaluates to true is the time point when the Event is
 * triggered.  In SBML Level 3, Trigger has additional attributes
 * that must be assigned values; they are discussed in a separate section
 * below.
 *
 * In SBML Level 2 and SBML Level 3 Version 1, the "math"
 * subelement is required, and it must evaluate to a boolean expression.
 * In SBML Level 3 Version 2, those restrictions are relaxed:
 * the "math" element is optional, and numeric values are allowed in
 * Boolean contexts (a '0' is interpreted as false, and all other
 * values are interpreted as true).  If a Trigger with no "math"
 * is present in an Event, that Event will never trigger, unless that
 * missing information is included in an SBML Level 3 package.
 *
 * An event only triggers when its Trigger expression makes the
 * transition in value from false to true.  The event will also
 * trigger at any subsequent time points when the trigger makes this
 * transition; in other words, an event can be triggered multiple times
 * during a simulation if its trigger condition makes the transition from
 * false to true more than once.  In SBML Level 3, the behavior
 * at the very start of simulation (i.e., at t = 0, where
 * t stands for time) is determined in part by the boolean flag
 * "initialValue".  This and other additional features introduced in SBML
 * Level 3 are discussed further below.
 *
 * ## Version differences
 *
 * SBML Level 3 Version 1 introduces two required attributes
 * on the Trigger object: "persistent" and "initialValue".  The rest of
 * this introduction describes these two attributes.
 *
 * ## The "persistent" attribute on Trigger
 *
 * In the interval between when an Event object triggers (i.e.,
 * its Trigger object expression transitions in value from false to
 * true) and when its assignments are to be executed, conditions
 * in the model may change such that the trigger expression transitions
 * back from true to false.  Should the event's assignments still be
 * made if this happens?  Answering this question is the purpose of the
 * "persistent" attribute on Trigger.
 *
 * If the boolean attribute "persistent" has a value of true, then once
 * the event is triggered, all of its assignments are always performed when
 * the time of execution is reached.  The name persistent is meant to
 * evoke the idea that the trigger expression does not have to be
 * re-checked after it triggers if "persistent"=true.  Conversely, if
 * the attribute value is false, then the trigger expression is not
 * assumed to persist: if the expression transitions in value back to
 * false at any time between when the event triggered and when it is to be
 * executed, the event is no longer considered to have triggered and its
 * assignments are not executed.  (If the trigger expression transitions
 * once more to true after that point, then the event is triggered, but
 * this then constitutes a whole new event trigger-and-execute sequence.)
 *
 * The "persistent" attribute can be especially useful when Event objects
 * contain Delay objects, but it is relevant even in a model without delays
 * if the model contains two or more events.  As explained in the
 * introduction to this section, the operation of all events in SBML
 * (delayed or not) is conceptually divided into two phases,
 * triggering and execution; however, unless events have
 * priorities associated with them, SBML does not mandate a particular
 * ordering of event execution in the case of simultaneous events.  Models
 * with multiple events can lead to situations where the execution of one
 * event affects another event's trigger expression value.  If that other
 * event has "persistent"=false, and its trigger expression evaluates to
 * false before it is to be executed, the event must not be executed
 * after all.
 *
 * ## The "initialValue" attribute on Trigger
 *
 * As mentioned above, an event triggers when the mathematical
 * expression in its Trigger object transitions in value from false to
 * true.  An unanswered question concerns what happens at the start of a
 * simulation: can event triggers make this transition at t = 0,
 * where t stands for time?
 *
 * In order to determine whether an event may trigger at t = 0, it
 * is necessary to know what value the Trigger object's "math" expression
 * had immediately prior to t = 0.  This starting value of the
 * trigger expression is determined by the value of the boolean attribute
 * "initialValue".  A value of true means the trigger expression is
 * taken to have the value true immediately prior to t = 0.  In
 * that case, the trigger cannot transition in value from false to
 * true at the moment simulation begins (because it has the value true
 * both before and after t = 0), and can only make the transition
 * from false to true sometime after t = 0.  (To do
 * that, it would also first have to transition to false before it could
 * make the transition from false back to true.)  Conversely, if
 * "initialValue"=false, then the trigger expression is assumed to start
 * with the value false, and therefore may trigger at t = 0 if
 * the expression evaluates to true at that moment.
 *
 * See {@link Event}, {@link Delay}, {@link EventAssignment}
 */
[Prefix="libsbml::"]
interface Trigger {
  /**
   * Get the mathematical formula for the trigger and return it
   * as an AST.
   *
   * @return {ASTNode} the math of this Trigger, or NULL if the math is not set
   */
  [Const] ASTNode getMath();

  /**
   * Sets the trigger expression of this Trigger instance to a copy of the given
   * ASTNode.
   *
   * @param {number} math an ASTNode representing a formula tree
   */
  long setMath(ASTNode math);

  /**
   * Predicate to test whether the math for this trigger is set.
   *
   * @return {boolean} true if the formula (meaning the "math" subelement) of
   * this Trigger is set, false otherwise
   */
  boolean isSetMath();

  /**
   * (SBML Level 3 only) Get the value of the "persistent" attribute
   * of this Trigger.
   *
   * @return {boolean} the value stored as the "persistent" attribute value
   * in this Trigger
   *
   * @note The attribute "persistent" is available in SBML Level 3,
   * but is not present in lower Levels of SBML.
   */
  boolean getPersistent();

  /**
   * (SBML Level 3 only) Sets the "persistent" attribute of this Trigger instance.
   *
   * @param {boolean} persistent a boolean representing the persistent value to be set
   *
   * @note The attribute "persistent" is available in SBML Level 3,
   * but is not present in lower Levels of SBML.
   */
  long setPersistent(boolean persistent);

  /**
   * (SBML Level 3 only) Predicate to test whether the "persistent"
   * attribute for this trigger is set.
   *
   * @return {boolean} true if the persistent attribute of
   * this Trigger is set, false otherwise
   *
   * @note The attribute "persistent" is available in SBML Level 3,
   * but is not present in lower Levels of SBML.
   */
  boolean isSetPersistent();
};

Trigger implements SBase;

/**
 * # A discontinuous SBML event.
 *
 * An SBML Event object defines when the event can occur, the variables
 * that are affected by it, how the variables are affected, and the event's
 * relationship to other events.  The effect of the event can optionally be
 * delayed after the occurrence of the condition which invokes it.
 *
 * The operation of Event is divided into two phases (even when the event
 * is not delayed): one when the event is triggered, and the other when
 * the event is executed.  Trigger objects define the conditions for
 * triggering an event, Delay objects define when the event is actually
 * executed, EventAssignment objects define the effects of executing the
 * event, and (in SBML Level 3) Priority objects influence the order
 * of EventAssignment performance in cases of simultaneous events.  Please
 * consult the descriptions of Trigger, Delay, EventAssignment and Priority
 * for more information.
 *
 * ## SBML Level/Version differences
 *
 * ## SBML Level 2
 *
 * In SBML Level 2 versions before Version 4, the semantics of
 * Event time delays were defined such that the expressions in the event's
 * assignments were always evaluated at the time the event was
 * triggered.  This definition made it difficult to define an event
 * whose assignment formulas were meant to be evaluated at the time the
 * event was executed (i.e., after the time period defined
 * by the value of the Delay element, or after any other simultaneous
 * event may have been executed and changed the model state).
 * In SBML Level 2 Version 4 and in
 * Level 3, the attribute "useValuesFromTriggerTime" on Event was added
 * to allow a model to indicate the time at which the event's assignments
 * are to be calculated, whether at the moment the event is triggered (if
 * the value of the attribute is true), or at the moment of execution
 * (if "useValuesFromTriggerTime"=false).  If the event has a delay,
 * the "useValuesFromTriggerTime" is likely to make a significant difference
 * in the values used in the assignment, but the possibility of simultaneous
 * events mean that even zero-delay events can have different results
 * depending on the value of this attribute.
 *
 * The definition of Event in SBML Level 2 Versions 1 and 2 includes
 * an additional attribute called "timeUnits", which allowed the time units
 * of the Delay to be set explicitly.  Later Versions of SBML Level 2
 * as well as SBML Level 3 do not define this attribute.  LibSBML
 * supports this attribute for compatibility with previous versions of SBML
 * Level 2; however, if a model in SBML Level 3 or Level 2
 * Versions 3&ndash;4 format sets the attribute, the
 * consistency-checking method SBMLDocument::checkConsistency() will report
 * an error.
 *
 * The attribute "useValuesFromTriggerTime" was introduced in SBML
 * Level 2 Version 4.  Models defined in prior Versions of SBML
 * Level 2 cannot use this attribute, and
 * SBMLDocument::checkConsistency() will report an error if they do.
 *
 * ## SBML Level 3
 *
 * SBML Level 3 introduces several changes to the structure and components
 * of Events compared to SBML Level 2.  These changes fall into two
 * main categories: changes to what is optional or required, and additions
 * of new attributes and elements.
 *
 * * The attribute "useValuesFromTriggerTime" on Event is mandatory (it
 * was optional in Level 2 and had a default value of true);
 * * Event's "listOfEventAssignments" element (of class
 * ListOfEventAssignments) is optional (it was mandatory in Level 2);
 * * Event's "priority" element (of class Priority) is new in
 * Level 3; and
 * * The Trigger object gains new mandatory attributes (described as part
 * of the definition of Trigger).
 * * In SBML Level 3 Version 2, the Trigger object became
 * optional.  An Event with no Trigger will simply not fire.
 *
 *
 * The changes to the attributes of Event are described below; the changes
 * to Trigger and Priority are described in their respective sections.
 *
 * ## Semantics of events in SBML Level 3 Version 1
 *
 * The detailed semantics of events are described in the specification
 * documents for each SBML Level/Version.  Here we include the description
 * from the SBML Level 1 Version 1.
 * Any transition of a Trigger object's "math" formula from the value
 * false to true will cause the enclosing Event object to
 * trigger.  Such a transition is not possible at the very start
 * of a simulation (i.e., at time t = 0) unless the Trigger
 * object's "initialValue" attribute has a value of false; this defines
 * the value of the trigger formula to be false immediately prior to the
 * start of simulation, thereby giving it the potential to change in value
 * from false to true when the formula is evaluated at t =
 * 0.  If "initialValue"=true, then the trigger expression cannot
 * transition from false to true at t = 0 but may do so at
 * some time t > 0.
 *
 * Consider an Event object definition E with delay d in
 * which the Trigger object's "math" formula makes a transition in value
 * from false to true at times t<sub>1</sub> and
 * t<sub>2</sub>.  The EventAssignment within the Event object
 * will have effect at t<sub>1</sub> + d and
 * t<sub>2</sub> + d irrespective of the relative times of
 * t<sub>1</sub> and t<sub>2</sub>.  For example, events
 * can "overlap" so that t<sub>1</sub> < t<sub>2</sub> <
 * t<sub>1</sub> + d still causes an event assignments to occur at
 * t<sub>1</sub> + d and t<sub>2</sub> + d.
 *
 * It is entirely possible for two events to be executed simultaneously,
 * and it is possible for events to trigger other events (i.e., an event
 * assignment can cause an event to trigger).  This leads to several
 * points:
 *
 *
 * * A software package should retest all event triggers after executing
 * an event assignment in order to account for the possibility that the
 * assignment causes another event trigger to transition from false to
 * true.  This check should be made after each individual Event object's
 * execution, even when several events are to be executed simultaneously.
 *
 * * Any Event object whose Trigger "persistent" attribute has the value
 * false must have its trigger expression reevaluated continuously
 * between when the event is triggered and when it is executed.  If
 * its trigger expression ever evaluates to false, it must be removed
 * from the queue of events pending execution and treated as any other
 * event whose trigger expression evaluates to false.
 *
 * * Although the precise time at which events are executed is not
 * resolved beyond the given execution point in simulated time, it is
 * assumed that the order in which the events occur is resolved.
 * This order can be significant in determining the overall outcome of a
 * given simulation.  When an event X triggers another
 * event Y and event Y has zero delay, then event
 * Y is added to the existing set of simultaneous events that are
 * pending execution.  Events X and Y form a
 * cascade of events at the same point in simulation time.  An event such
 * as Y may have a special priority if it contains a Priority
 * subobject.
 *
 * * All events in a model are open to being in a cascade.  The position
 * of an event in the event queue does not affect whether it can be in the
 * cascade: event Y can be triggered whether it is before or after
 * X in the queue of events pending execution.  A cascade of
 * events can be potentially infinite (never terminate); when this occurs a
 * simulator should indicate this has occurred---it is incorrect for a
 * simulator to break a cascade arbitrarily and continue the simulation
 * without at least indicating that the infinite cascade occurred.
 *
 * * Simultaneous events having no defined priorities are executed in an
 * undefined order.  This does not mean that the behavior of the simulation
 * is completely undefined; merely that the order of execution of
 * these particular events is undefined.  A given simulator may use any
 * algorithm to choose an order as long as every event is executed exactly
 * once.
 *
 * * Events with defined priorities are executed in the order implied by
 * their Priority "math" formula values, with events having higher
 * priorities being executed ahead of events with lower priorities, and
 * events with identical priorities being executed in a random order with
 * respect to one another (as determined at run-time by some random
 * algorithm equivalent to coin-flipping).  Newly-triggered events that are
 * to be executed immediately (i.e., if they define no delays) should be
 * inserted into the queue of events pending execution according to their
 * priorities: events with higher priority values value must be inserted
 * ahead of events with lower priority values and after any pending events
 * with even higher priorities, and inserted randomly among pending events
 * with the same priority values.  Events without Priority objects must be
 * inserted into the queue in some fashion, but the algorithm used to place
 * it in the queue is undefined.  Similarly, there is no restriction on the
 * order of a newly-inserted event with a defined Priority with respect to
 * any other pending Event without a defined Priority.
 *
 * * A model variable that is the target of one or more event
 * assignments can change more than once when simultaneous events are
 * processed at some time point t.  The model's behavior (output)
 * for such a variable is the value of the variable at the end of
 * processing all the simultaneous events at time t.
 *
 *
 *
 * ## Restrictions relaxed in SBML Level 3 Version 2
 *
 * In SBML Level 3 Version 2, several restrictions were lifted
 * that have the potential to affect the semantics of an Event:
 *
 * * The Trigger subobject of an Event is optional.  If missing,
 * an Event is never triggered, unless an alternate triggering
 * scheme is introduced by an SBML Level 3 package.
 *
 * * The "math" subelements of an Event Trigger, Delay, Priority,
 * and EventAssignment are all optional.  If any of these elements lack
 * a "math" subelement, and that information is not supplied in an SBML
 * Level 3 package, it is mathematically equivalent to the Trigger,
 * Delay, Priority, or EventAssignment not being present at all.
 *
 * * The ListOfEventAssignments may be empty, which is mathematically
 * equivalent to the Event not having a ListOfEventAssignments at all.
 *
 * * Any "math" subelement may return a Boolean or a numeric value
 * in any context.  If a numeric value is used in a Boolean context,
 * a "0" is interpreted as false, and all other values are
 * interpreted as true.  If a Boolean value is used in a numeric
 * context, a true is interpreted as a 1, and a false is
 * interpreted as a 0.  This means (for example) that a Trigger value
 * that changes from 0.0 to anything else is equivalent to changing
 * from false to true.
 *
 * See {@link Trigger}, {@link Priority}, {@link Delay}, {@link EventAssignment}
 */
[Prefix="libsbml::"]
interface Event {
  Delay createDelay();
  Delay getDelay();
  long setDelay([Const] Delay delay);
  boolean isSetDelay();

  Priority createPriority();
  long setPriority(Priority priority);
  Priority getPriority();
  boolean isSetPriority();

  long setTrigger(Trigger trigger);
  Trigger getTrigger();
  boolean isSetTrigger();

  EventAssignment createEventAssignment();
  EventAssignment getEventAssignment(unsigned long n);
  unsigned long getNumEventAssignments();
};

Event implements SBase;
