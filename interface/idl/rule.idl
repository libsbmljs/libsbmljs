/**
 * # Parent class for SBML rules in libSBML.
 *
 * In SBML, rules provide additional ways to define the values of
 * variables in a model, their relationships, and the dynamical behaviors
 * of those variables.  They enable encoding relationships that cannot be
 * expressed using Reaction nor InitialAssignment objects alone.
 *
 * The libSBML implementation of rules mirrors the SBML Level 3
 * definition (which is in turn is very similar to the
 * Level 2 Version 4 definition), with Rule being the parent
 * class of three subclasses as explained below.  The Rule class itself
 * cannot be instantiated by user programs and has no constructor; only the
 * subclasses AssignmentRule, AlgebraicRule and RateRule can be
 * instantiated directly.
 */
[Prefix="libsbml::"]
interface Rule {
  /**
   * Predicate returning true if this Rule is a RateRule (SBML
   * Levels 2&ndash;3) or has a "type" attribute value of "rate"
   * (SBML Level 1).
   *
   * @return {boolean} true if this Rule is a RateRule (Level 2) or has
   * type "rate" (Level 1), false otherwise.
   */
  boolean isRate();

  /**
   * Predicate returning true if this Rule is an AssignmentRule.
   *
   * @return {boolean} true if this Rule is an AssignmentRule, false otherwise.
   */
  boolean isAssignment();

  /**
   * Predicate returning true if this Rule is an AlgebraicRule.
   *
   * @return {boolean} true if this Rule is an AlgebraicRule, false otherwise.
   */
  boolean isAlgebraic();

  /**
   * Predicate returning true if this Rule is an AssignmentRule (SBML
   * Levels 2&ndash;3) or has a "type" attribute value of "scalar"
   * (SBML Level 1).
   *
   * @return {boolean} true if this Rule is an AssignmentRule (Level 2) or has
   * type "scalar" (Level 1), false otherwise.
   */
  boolean isScalar ();

  /**
   * Predicate returning true if this Rule is a SpeciesConcentrationRule
   * or equivalent.
   *
   * This libSBML method works for SBML Level 1 models (where there is
   * such a thing as an explicit SpeciesConcentrationRule), as well as
   * other Levels of SBML.  For Levels above Level 1, this method
   * checks the symbol being affected by the rule, and returns true if
   * the symbol is the identifier of a Species object defined in the model.
   *
   * @return {boolean} true if this Rule is a SpeciesConcentrationRule, false
   * otherwise.
   */
  boolean isSpeciesConcentration ();

  /**
   * Get the mathematical formula of this Rule as an ASTNode tree.
   *
   * @return {ASTNode} the value of the "math" subelement of this Rule,
   * or NULL if the math is not set.
   *
   *  **Note:** The subelement "math" is present in SBML Levels 2
   * and 3.  In SBML Level 1, the equivalent construct is the
   * attribute named "formula".  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   */
  [Const] ASTNode getMath ();

  /**
   * Predicate returning true if this Rule's mathematical expression is
   * set.
   *
   * This method is equivalent to isSetFormula().
   *
   * @return {boolean} true if the formula (or equivalently the math) for this
   * Rule is set, false otherwise.
   *
   *  **Note:** The subelement "math" is present in SBML Levels 2
   * and 3.  In SBML Level 1, the equivalent construct is the
   * attribute named "formula".  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   */
  boolean isSetMath ();

  /**
   * Returns the mathematical expression of this Rule in text-string form.
   *
   * The text string is produced by {@link SBMLFormulaParser#parseL3Formula}; please consult
   * the documentation for that function to find out more about the format
   * of the text-string formula.
   *
   * @return {DOMString} the formula text string for this Rule.
   */
  DOMString getFormula();

  /**
   * Sets the "math" subelement of this Rule to an expression in text-string
   * form.
   *
   * This is equivalent to setMath(const ASTNode* math).  The provision of
   * using text-string formulas is retained for easier SBML Level 1
   * compatibility.  The formula is converted to an ASTNode internally.
   *
   * @param {string} formula a mathematical formula in text-string form
   *
   *  **Note:** The attribute "formula" is specific to SBML Level 1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * "math".  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   */
  long setFormula(DOMString formula);

  /**
   * Predicate returning true if this Rule's mathematical expression is
   * set.
   *
   * This method is equivalent to isSetMath().  This version is present for
   * easier compatibility with SBML Level 1, in which mathematical
   * formulas were written in text-string form.
   *
   * @return {boolean} true if the mathematical formula for this Rule is
   * set, false otherwise.
   *
   *  **Note:** The attribute "formula" is specific to SBML Level 1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * "math".  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   */
  boolean isSetFormula ();

  /**
   * Get the value of the "variable" attribute of this Rule object.
   *
   * The "variable" attribute of a Rule indicates the element which
   * the results of the "math" are to be applied.  An AlgebraicRule has
   * no "variable", and will always return an empty string.
   *
   * @return {string} the identifier string stored as the "variable" attribute value
   * in this Rule, or NULL if this object is an AlgebraicRule object, or if
   * the attribute is unset.
   */
  DOMString getVariable ();

  /**
   * Sets the "variable" attribute value of this Rule object.
   *
   * @param {string} sid the identifier of a Compartment, Species or Parameter
   * elsewhere in the enclosing Model object
   */
  long setVariable (DOMString sid);

  /**
   * Predicate returning true if this Rule's "variable" attribute is set.
   *
   * @return {boolean} true if the "variable" attribute value of this Rule is
   * set, false otherwise.
   */
  boolean isSetVariable ();

  /**
   * Unsets the value of the "variable" attribute of this Rule object.
   */
  long unsetVariable ();

  /**
   * Calculates and returns a UnitDefinition that expresses the units of
   * measurement assumed for the "math" expression of this Rule.
   *
   * @return {UnitDefinition} a UnitDefinition that expresses the units of the math
   * expression of this Rule, or NULL if one cannot be constructed.
   */
  UnitDefinition getDerivedUnitDefinition();

  /**
   * Predicate returning true if the math expression of this Rule contains
   * parameters/numbers with undeclared units.
   *
   * @return {boolean} true if the math expression of this Rule includes
   * parameters/numbers with undeclared units, false otherwise.
   *
   *  **Note:** A return value of true indicates that the UnitDefinition
   * returned by getDerivedUnitDefinition() may not accurately represent
   * the units of the expression.
   */
  boolean containsUndeclaredUnits();

  /**
   * Predicate returning true if this Rule is an ParameterRule or
   * equivalent.
   *
   * This libSBML method works for SBML Level 1 models (where there is
   * such a thing as an explicit ParameterRule), as well as other Levels of
   * SBML.  For Levels above Level 1, this method checks the symbol
   * being affected by the rule, and returns true if the symbol is the
   * identifier of a Parameter object defined in the model.
   *
   * @return {boolean} true if this Rule is a ParameterRule, false
   * otherwise.
   */
  boolean isParameter();
};

Rule implements SBase;

/**
 * # An SBML assignment rule representing x = f(Y).
 *
 * The rule type AssignmentRule is derived from the parent class Rule.  It
 * is used to express equations that set the values of variables.  The
 * left-hand side (the attribute named "variable") of an assignment rule
 * must refer to the identifier of a Species, SpeciesReference (in SBML
 * Level3), Compartment, or global Parameter
 * object in the model (but not a
 * Reaction).  In SBML Level3 Version2, it may also refer to
 * the SId of an element defined in an SBML Level3 package with
 * mathematical meaning and the ability to be assigned.
 * The entity identified must have its "constant" attribute set
 * to false.  The effects of an assignment rule construct are in general
 * terms the same, but differ in the precise details depending on the type of
 * SBML component being set:
 *
 *
 * * In the case of a species, an SBML assignment rule sets the
 * referenced species' quantity (whether a "concentration" or "amount") to
 * the value determined by the formula in the MathML subelement "math".
 * The unit associated with the value produced by the "math" formula
 * should (in SBML Level2 Version4 and in SBML Level3) or must (in
 * SBML releases prior to Level2 version4) be equal to the unit
 * associated with the species' quantity.  Restrictions: There
 * must not be both an AssignmentRule "variable" attribute and a
 * SpeciesReference "species" attribute having the same value in a model,
 * unless the referenced Species object has
 * its "boundaryCondition" attribute set to true.  In other words, an
 * assignment rule cannot be defined for a species that is created or
 * destroyed in a reaction unless that species is defined as a boundary
 * condition in the model.
 *
 * * (For SBML Level3 only) In the case of a species
 * reference, an assignment rule sets the stoichiometry of the
 * referenced reactant or product to the value determined by the formula in
 * "math".  The unit associated with the value produced by the "math"
 * formula should be consistent with the unit "dimensionless", because
 * reactant and product stoichiometries in reactions are dimensionless
 * quantities.
 *
 * * In the case of a compartment, an SBML assignment rule sets
 * the referenced compartment's size to the value determined by the formula
 * in the "math" subelement of the AssignmentRule
 * object.  The overall units of the
 * formula in "math" should (in SBML Level2 Version4 and in
 * SBML Level3) or must (in SBML releases prior to Level2
 * version4) be the same as the units of the size of the compartment.
 *
 * * In the case of a parameter, an assignment rule sets the
 * referenced parameter's value to that determined by the formula in the
 * "math" subelement of the AssignmentRule
 * object.  The overall units of the
 * formula in the "math" subelement should (in SBML Level2
 * Version4 and in SBML Level3) or must (in SBML releases
 * prior to Level2 version4) be the same as the units defined for
 * the parameter.
 *
 * * (For SBML Level3 Version2 only) In the case of
 * an object from an SBML Level3 package, an AssignmentRule sets
 * the referenced object's value (as defined by that package) to the
 * value of the formula in math. The unit of measurement associated
 * with the value produced by the formula should be the same as that
 * object's units attribute value (if it has such an attribute), or be
 * equal to the units of model components of that type (if objects of
 * that class are defined by the package as having the same units).
 *
 *
 *
 * In SBML Level2 and Level3 Version1, the "math"
 * subelement of the AssignmentRule is required.  In SBML Level3
 * Version2, this rule is relaxed, and the subelement is
 * optional.  If an AssignmentRule with no "math" child is present
 * in the model, the value of its referenced "variable" is
 * undefined.  This may represent a situation where the model itself
 * is unfinished, or the missing information may be provided by an
 * SBML Level3 package.
 *
 * If the variable attribute of an AssignmentRule object references an
 * object in an SBML namespace not understood by the interpreter reading
 * a given SBML document (that is, if the object is defined by an SBML
 * Level3 package that the software does not support), the assignment
 * rule must be ignored--the object's value will not need to be set, as the
 * interpreter could not understand that package. If an interpreter cannot
 * establish whether a referenced object is missing from the model or
 * instead is defined in an SBML namespace not understood by the interpreter,
 * it may produce a warning to the user. (The latter situation may only
 * arise if an SBML package is present in the SBML document with a
 * package:required attribute of "true".)
 *
 * In the context of a simulation, assignment rules are in effect at all
 * times, t < 0.  For purposes of evaluating
 * expressions that involve the delay "csymbol" (see the SBML
 * Level2 specification), assignment rules are considered to apply
 * also at t > 0.  Please consult the relevant
 * SBML specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time t
 * > 0.
 *
 * A model must not contain more than one AssignmentRule or RateRule
 * object having the same value of
 * "variable"; in other words, in the set of all assignment rules and rate
 * rules in an SBML model, each variable appearing in the left-hand sides can
 * only appear once.  This simply follows from the fact that an indeterminate
 * system would result if a model contained more than one assignment rule for
 * the same variable or both an assignment rule and a rate rule for the same
 * variable.
 *
 * Similarly, a model must also not contain both an AssignmentRule
 * and an InitialAssignment definition for the same variable, because both
 * kinds of constructs apply prior to and at the start of simulation time,
 * i.e., t > 0.  If a model contained both an
 * initial assignment and an assignment rule for the same variable, an
 * indeterminate system would result.
 *
 * The value calculated by an AssignmentRule
 * object overrides the value assigned to
 * the given symbol by the model component defining that symbol.  For
 * example, if a Compartment object's
 * "size" attribute value is set in its definition, and the model also
 * contains an AssignmentRule object
 * having that compartment's "id" as its "variable" value, then the "size"
 * assigned in the Compartment object
 * definition is ignored and the value assigned based on the computation
 * defined in the AssignmentRule.  This does not mean that a
 * definition for a given symbol can be omitted if there is an AssignmentRule
 * object involving it.  For example,
 * there must be a Parameter object
 * definition for a given parameter if there is an AssignmentRule definition
 * for that parameter.  It is only a question of which value definition takes
 * precedence.
 */
[Prefix="libsbml::"]
interface AssignmentRule {
  /*DOMString getVariable();
  long setVariable(DOMString id);
  boolean isSetVariable();*/

  /*[Const] ASTNode getMath();*/
  /*long setMath(ASTNode math);*/
  /*boolean isSetMath();*/
};

AssignmentRule implements Rule;

/**
 * # An SBML rate rule representing dx/dt = f(<b>Y</b>).
 *
 * The rule type RateRule is derived from the parent class Rule.  It is
 * used to express equations that determine the rates of change of
 * variables.  The left-hand side (the "variable" attribute) can refer to
 * the identifier of a species, compartment, or parameter (but not a
 * reaction).  The entity identified must have its "constant" attribute set
 * to false.  The effects of a RateRule are in general terms the same,
 * but differ in the precise details depending on which variable is being
 * set:
 *
 *  * In the case of a species, a RateRule sets the rate of
 * change of the species' quantity (concentration or amount of
 * substance) to the value determined by the formula in the "math"
 * subelement of the RateRule object.  The overall units of the formula in
 * "math" should (in SBML Level2 Version4 and in SBML Level3) or
 * must (in SBML releases prior to Level2 version4) be equal to
 * the unit of species quantity divided by the model-wide unit of
 * time.  Restrictions: There must not be both a RateRule
 * "variable" attribute and a SpeciesReference "species" attribute having
 * the same value, unless that species has its "boundaryCondition"
 * attribute is set to true.  This means a rate rule cannot be defined
 * for a species that is created or destroyed in a reaction, unless that
 * species is defined as a boundary condition in the model.
 *
 * * (For SBML Level3 only) In the case of a species
 * reference, a RateRule sets the rate of change of the stoichiometry
 * of the referenced reactant or product to the value determined by the
 * formula in "math".  The unit associated with the value produced by the
 * "math" formula should be consistent with the unit "dimensionless"
 * divided by the model-wide unit of time.
 *
 * * In the case of a compartment, a RateRule sets the rate of
 * change of the compartment's size to the value determined by the formula
 * in the "math" subelement of the RateRule object.  The overall units of
 * the formula should (in SBML Level2 Version4 and in SBML
 * Level3) or must (in SBML releases prior to Level2
 * version4) be the units of the compartment's size divided
 * by the model-wide unit of time.
 *
 * * In the case of a parameter, a RateRule sets the rate of
 * change of the parameter's value to that determined by the formula in the
 * "math" subelement of the RateRule object.  The overall units of the
 * formula should (in SBML Level2 Version4 and in SBML
 * Level3) or must (in SBML releases prior to Level2
 * version4) be the Parameter object's "unit" attribute value divided
 * by the model-wide unit of time.
 *
 * * (For SBML Level3 Version2 only) In the case of
 * an object from an SBML Level3 package, a RateRule sets the rate
 * of change of the referenced object's value (as defined by that package)
 * to the value of the formula in "math".  The unit of measurement associated
 * with the value produced by the formula should be the same as that object's
 * units attribute value (if it has such an attribute) divided by the
 * model-wide unit of time, or be equal to the units of model components
 * of that type (if objects of that class are defined by the package as having
 * the same units) divided by the model-wide unit of time.
 *
 *
 * In SBML Level2 and Level3 Version1, the "math"
 * subelement of the RateRule is required.  In SBML Level3
 * Version2, this rule is relaxed, and the subelement is
 * optional.  If a RateRule with no "math" child is present in the model,
 * the rate at which its referenced "variable" changes over time is
 * undefined.  This may represent a situation where the model itself
 * is unfinished, or the missing information may be provided by an
 * SBML Level3 package.
 *
 * If the variable attribute of a RateRule object references an object in
 * an SBML namespace that is not understood by the interpreter reading a
 * given SBML document (that is, if the object is defined by an SBML
 * Level3 package that the software does not support), the rate rule
 * must be ignored--the object's value will not need to be set, as the
 * interpreter could not understand that package. If an interpreter cannot
 * establish whether a referenced object is missing from the model or
 * instead is defined in an SBML namespace not understood by the interpreter,
 * it may produce a warning to the user. (The latter situation may only
 * arise if an SBML package is present in the SBML document with a
 * package:required attribute of "true".)
 *
 * In the context of a simulation, rate rules are in effect for simulation
 * time t &gt; 0.  Please consult the relevant SBML
 * specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time t
 * < 0.
 *
 * As mentioned in the description of AssignmentRule, a model must not
 * contain more than one RateRule or AssignmentRule object having the same
 * value of "variable"; in other words, in the set of all assignment rules
 * and rate rules in an SBML model, each variable appearing in the
 * left-hand sides can only appear once.  This simply follows from the fact
 * that an indeterminate system would result if a model contained more than
 * one assignment rule for the same variable or both an assignment rule and
 * a rate rule for the same variable.
 */
[Prefix="libsbml::"]
interface RateRule {
  /*DOMString getVariable();
  long setVariable(DOMString id);
  boolean isSetVariable();

  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();*/
};

RateRule implements Rule;

/**
 * # An SBML algebraic rule representing 0 = f(W).
 *
 * The rule type AlgebraicRule is derived from the parent class Rule.  It
 * is used to express equations that are neither assignments of model
 * variables nor rates of change.  AlgebraicRule does not add any
 * attributes to the basic Rule; its role is simply to distinguish this
 * case from the other cases.
 *
 * In the context of a simulation, algebraic rules are in effect at all
 * times, t < 0.  For purposes of evaluating
 * expressions that involve the delay "csymbol" (see the SBML
 * specification), algebraic rules are considered to apply also at
 * t > 0.  Please consult the relevant SBML
 * specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time t
 * > 0.
 *
 * An SBML model must not be overdetermined.  The ability to define
 * arbitrary algebraic expressions in an SBML model introduces the
 * possibility that a model is mathematically overdetermined by the overall
 * system of equations constructed from its rules, reactions and events.
 * Therefore, if an algebraic rule is introduced in a model, for at least
 * one of the entities referenced in the rule's "math" element the value of
 * that entity must not be completely determined by other constructs in the
 * model.  This means that at least this entity must not have the attribute
 * "constant"=true and there must also not be a rate rule or assignment
 * rule for it.  Furthermore, if the entity is a Species object, its value
 * must not be determined by reactions, which means that it must either
 * have the attribute "boundaryCondition"=true or else not be involved
 * in any reaction at all.  These restrictions are explained in more detail
 * in the SBML specification documents.
 *
 * In SBML Levels 2 and 3, Reaction object identifiers can be
 * referenced in the "math" expression of an algebraic rule, but reaction
 * rates can never be determined by algebraic rules.  This is true
 * even when a reaction does not contain a KineticLaw
 * object.  (In such cases of missing
 * kinetic law definitions, the model is valid but incomplete; the rates of
 * reactions lacking kinetic laws are simply undefined, and not determined by
 * the algebraic rule.)
 *
 * In SBML Level2 and Level3 Version1, the "math"
 * subelement of the AlgebraicRule is required.  In SBML Level3
 * Version2, this rule is relaxed, and the subelement is
 * optional.  If an AlgebraicRule with no "math" child is present
 * in the model, no additional mathematical constraints on the model are
 * added by the rule.  This may represent a situation where the model itself
 * is unfinished, or the missing information may be provided by an
 * SBML Level3 package.
 *
 * Finally, any symbol that appears as the target of a rateOf csymbol
 * (AST_FUNCTION_RATE_OF, introduced in
 * SBML Level3 Version2) may
 * not be determined by an AlgebraicRule. This is because the rateOf
 * csymbol is defined as applying only to symbols whose rates of change
 * are easily determinable.
 *
 * Users should note that these rules about what symbols may not be
 * determined by an AlgebraicRule may be used to discover what symbol
 * is being determined by an AlgebraicRule. If three symbols appear in
 * the math element of an AlgebraicRule, the first of which is flagged
 * constant=true, and the second of which appears as the target of a
 * rateOf csymbol, one may conclude that the AlgebraicRule must be used
 * to determine the value of the third symbol. This is, in fact, a
 * principle use (outside of validation) of the constant attribute: its
 * use in allowing software to properly identify the dependent variable
 * in an AlgebraicRule.
 */
[Prefix="libsbml::"]
interface AlgebraicRule {
  /*[Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();*/
};

AlgebraicRule implements Rule;


[Prefix="libsbmljs::"]
interface RuleSwitch {
  void RuleSwitch();

  AssignmentRule castToAssignmentRule(Rule r);
  RateRule castToRateRule(Rule r);
  AlgebraicRule castToAlgebraicRule(Rule r);
};
