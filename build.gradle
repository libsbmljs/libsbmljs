import java.nio.file.Path
import java.nio.file.Paths

// optional packages
boolean enableLayout = true
boolean enableRender = true
boolean enableFBC = false
boolean enableMulti = false
boolean enableQual = false
boolean enableComp = false

def libsbmlDir = new File('libsbml')

if (!libsbmlDir.exists() || !libsbmlDir.isDirectory()) {
  throw new GradleException('Expected to find the directory "libsbml", but it does not exist')
}

def sbmlTypesH = new File(Paths.get("libsbml","src","sbml","SBMLTypes.h").toString())

if (!sbmlTypesH.exists() || sbmlTypesH.isDirectory()) {
  throw new GradleException('Your libsbml/src/sbml source directory was expected to contain SBMLTypes.h, but it does not')
}

class ConcatFiles extends DefaultTask {
  def files = []

  @OutputFile
  File target

  @TaskAction
  void concat() {
    target.withWriter { writer ->
      files.each { f ->
        getProject().file(f).withReader { reader ->
            writer << reader << '\n'
        }
      }
    }
  }

  public ConcatFiles include(String... includes) {
    files.addAll(includes);
    return this;
  }

  public ConcatFiles include(Path... includes) {
    files.addAll(includes*.toString());
    return this;
  }
}

task combineIDL(type: ConcatFiles) {
  String idl_dir = Paths.get("interface","idl")
  include Paths.get(idl_dir, "core_interface.idl")
  if (enableLayout) {
    include Paths.get(idl_dir, "layout_interface.idl")
  }
  if (enableRender) {
    include Paths.get(idl_dir, "render_interface.idl")
  }
  if (enableFBC) {
    include Paths.get(idl_dir, "fbc_interface.idl")
  }
  if (enableMulti) {
    include Paths.get(idl_dir, "multi_interface.idl")
  }
  if (enableQual) {
    include Paths.get(idl_dir, "qual_interface.idl")
  }
  if (enableComp) {
    include Paths.get(idl_dir, "comp_interface.idl")
  }
  target = file(Paths.get("$buildDir","interface","idl","sbml_interface.idl"))
}

task combineCPP(type: ConcatFiles) {
  String cpp_dir = Paths.get("interface","cpp")
  include Paths.get(cpp_dir, "core_interface_wrapper.cpp")
  include Paths.get(cpp_dir, "sbml_interface_proxy.cpp")
  if (enableLayout) {
    include Paths.get(cpp_dir, "layout_interface_wrapper.cpp")
  }
  if (enableRender) {
    include Paths.get(cpp_dir, "render_interface_wrapper.cpp")
  }
  if (enableFBC) {
    include Paths.get(cpp_dir, "fbc_interface_wrapper.cpp")
  }
  if (enableMulti) {
    include Paths.get(cpp_dir, "multi_interface_wrapper.cpp")
  }
  if (enableQual) {
    include Paths.get(cpp_dir, "qual_interface_wrapper.cpp")
  }
  if (enableComp) {
    include Paths.get(cpp_dir, "comp_interface_wrapper.cpp")
  }
  target = file(Paths.get("$buildDir","interface","cpp","sbml_interface_wrapper.cpp"))
}
