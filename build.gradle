import java.nio.file.Path
import java.nio.file.Paths

description = "Run libsbml as JavaScript in the browser"
version = "0.0.1"

// locate and set up Emscripten variables

ext.emscriptenDir = "$System.env.EMSCRIPTEN"
if ("${emscriptenDir}" == "null") {
  throw new GradleException('The EMSCRIPTEN environment variable is not set. Run "source /path/to/emsdk_env.sh".')
}

ext.webIDLBinderPath = Paths.get(project.rootDir.path,"emtools","webidl_binder.py").toString()
def webIDLBinder = new File(webIDLBinderPath)
if (!webIDLBinder.exists() || webIDLBinder.isDirectory()) {
  throw new GradleException('Expected to find WebIDL binder at tools/webidl_binder.py, but it does not exist')
}
def emscriptenToolsPath = Paths.get(emscriptenDir,"tools").toString()
def emscriptenToolsDir = new File(emscriptenToolsPath)
if (!emscriptenToolsDir.exists() || !emscriptenToolsDir.isDirectory()) {
  throw new GradleException('Expected to find the Emscripten tools directory $EMSCRIPTEN/tools, but it does not exist')
}
println emscriptenToolsPath

ext.emconfigureCommand = Paths.get(emscriptenDir,"emconfigure").toString()
def emconfigureFile = new File(emconfigureCommand)
if (!emconfigureFile.exists() || emconfigureFile.isDirectory()) {
  throw new GradleException('Expected to find emconfigure script at $EMSCRIPTEN/emconfigure, but it does not exist')
}

ext.emmakeCommand = Paths.get(emscriptenDir,"emmake").toString()
def emmakeFile = new File(emconfigureCommand)
if (!emmakeFile.exists() || emmakeFile.isDirectory()) {
  throw new GradleException('Expected to find emmake script at $EMSCRIPTEN/emmake, but it does not exist')
}

ext.emccCommand = Paths.get(emscriptenDir,"emcc").toString()
def emccFile = new File(emccCommand)
if (!emccFile.exists() || emccFile.isDirectory()) {
  throw new GradleException('Expected to find emcc at $EMSCRIPTEN/emcc, but it does not exist')
}

ext.emccToolchainPath = Paths.get(emscriptenDir,"cmake","Modules","Platform","Emscripten.cmake").toString()
def emccToolchain = new File(emccToolchainPath)
if (!emccToolchain.exists() || emccToolchain.isDirectory()) {
  throw new GradleException('Expected to find Emscripten.cmake binder at $EMSCRIPTEN/cmake/Modules/Platform/Emscripten.cmake, but it does not exist')
}

// additional build options
ext.withEmrun = findProperty('withEmrun') || false

// optional libsbml packages
ext.enableLayout = findProperty('enableLayout') || true
ext.enableRender = findProperty('enableRender') || true
ext.enableFBC = findProperty('enableFBC') || false
ext.enableMulti = findProperty('enableMulti') || false
ext.enableQual = findProperty('enableQual') || false
ext.enableComp = findProperty('enableComp') || false
ext.enableDistrib = findProperty('enableDistrib') || false
ext.enableDyn = findProperty('enableDyn') || false
ext.enableGroups = findProperty('enableGroups') || false
ext.enableArrays = findProperty('enableArrays') || false
ext.enableSpatial = findProperty('enableSpatial') || false

class ConcatFiles extends DefaultTask {
  def files = []

  @OutputFile
  File target

  @TaskAction
  void concat() {
    target.withWriter { writer ->
      files.each { f ->
        getProject().file(f).withReader { reader ->
            writer << reader << '\n'
        }
      }
    }
  }

  public ConcatFiles include(String... includes) {
    files.addAll(includes);
    return this;
  }

  public ConcatFiles include(Path... includes) {
    files.addAll(includes*.toString());
    return this;
  }
}


// ** Create IDL wrapper **


task combineIDL(type: ConcatFiles) {
  String idl_dir = Paths.get("interface","idl")
  include Paths.get(idl_dir, "core_interface.idl")
  if (enableLayout) {
    include Paths.get(idl_dir, "layout_interface.idl")
  }
  if (enableRender) {
    include Paths.get(idl_dir, "render_interface.idl")
  }
  if (enableFBC) {
    include Paths.get(idl_dir, "fbc_interface.idl")
  }
  if (enableMulti) {
    include Paths.get(idl_dir, "multi_interface.idl")
  }
  if (enableQual) {
    include Paths.get(idl_dir, "qual_interface.idl")
  }
  if (enableComp) {
    include Paths.get(idl_dir, "comp_interface.idl")
  }
  target = file(Paths.get("$buildDir","interface","idl","sbml_interface.idl"))
}

task combineCPP(type: ConcatFiles) {
  String cpp_dir = Paths.get("interface","cpp")
  include Paths.get(cpp_dir, "common.cpp")
  include Paths.get(cpp_dir, "core_interface_wrapper.cpp")
  if (enableLayout) {
    include Paths.get(cpp_dir, "layout_interface_wrapper.cpp")
  }
  if (enableRender) {
    include Paths.get(cpp_dir, "render_interface_wrapper.cpp")
  }
  if (enableFBC) {
    include Paths.get(cpp_dir, "fbc_interface_wrapper.cpp")
  }
  if (enableMulti) {
    include Paths.get(cpp_dir, "multi_interface_wrapper.cpp")
  }
  if (enableQual) {
    include Paths.get(cpp_dir, "qual_interface_wrapper.cpp")
  }
  if (enableComp) {
    include Paths.get(cpp_dir, "comp_interface_wrapper.cpp")
  }
  include Paths.get(cpp_dir, "sbml_interface_proxy.cpp")
  target = file(Paths.get("$buildDir","interface","cpp","sbml_interface_wrapper.cpp"))
}

task patchLibSBML {
  ant.patch(patchfile: file('disable_compile_check.patch'),
            originalFile: Paths.get("libsbml","src","CMakeLists.txt"))
}

task generateIdlInterface(type:Exec) {
  workingDir Paths.get("$buildDir","interface","idl").toString()

  inputs.file(webIDLBinder.getAbsolutePath())

  environment 'PYTHONPATH', emscriptenDir

  commandLine 'python3', webIDLBinder.getAbsolutePath(), 'sbml_interface.idl', 'sbml_interface'
}
generateIdlInterface.dependsOn(combineIDL)

// validate expat and libsbml source directories

// expat
ext.expatPath = 'expat'
def expatDir = new File(expatPath)
if (!expatDir.exists() || !expatDir.isDirectory()) {
  throw new GradleException('Expected to find the directory "expat", but it does not exist')
}

def expatCMakeFile = new File(Paths.get(expatPath,"CMakeLists.txt").toString())
if (!expatCMakeFile.exists() || expatCMakeFile.isDirectory()) {
  throw new GradleException('Expected to find the file "expat/CMakeLists.txt", but it does not exist')
}
String expatCMakeSrc = expatCMakeFile.text
def expatVersionMatcher = (expatCMakeSrc =~ /(?m)^set\(PACKAGE_VERSION "([\d.]+)"\)$/)
if (expatVersionMatcher.getCount() == 1) {
  ext.expatVersion = expatVersionMatcher[0][1]
} else {
  throw new GradleException('Unable to determine expat version')
}

// libsbml
ext.libsbmlPath = 'libsbml'
def libsbmlDir = new File(libsbmlPath)
if (!libsbmlDir.exists() || !libsbmlDir.isDirectory()) {
  throw new GradleException('Expected to find the directory "libsbml", but it does not exist')
}

def sbmlTypesH = new File(Paths.get("libsbml","src","sbml","SBMLTypes.h").toString())
if (!sbmlTypesH.exists() || sbmlTypesH.isDirectory()) {
  throw new GradleException('Your libsbml/src/sbml source directory was expected to contain SBMLTypes.h, but it does not')
}

def sbmlVersionFile = new File(Paths.get("libsbml","VERSION.txt").toString())
if (!sbmlVersionFile.exists() || sbmlVersionFile.isDirectory()) {
  throw new GradleException('Your libsbml source directory was expected to contain VERSION.txt, but it does not')
}
ext.libSbmlVersion = sbmlVersionFile.text.trim()


// ** Build Expat **

// https://github.com/awrichar/gradle-external-build/blob/master/examples/cmake/build.gradle
// def getIntermediateDir = { binary ->
//     file("${buildDir}/external-build/${binary.component.name}")
// }
// def getInstallDir = { binary ->
//     file("${buildDir}/install/${binary.component.name}")
// }

// model {
//   // components {
//     expat(ExternalNativeLibrarySpec) {
//       buildConfig(CMake) {
//         def intDir = getIntermediateDir(binary)
//         def outputDir = getInstallDir(binary)
//
//         // Uncomment for easier debugging
//         redirectOutput = false
//
//         cmakeRoot expatPath
//         cmakeArgs "-DCMAKE_TOOLCHAIN_FILE=${emccToolchain} -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${outputDir}"
//         targets 'install'
//
//         inputs.dir 'src'
//         inputs.file 'CMakeLists.txt'
//         outputs.dir outputDir
//
//         workingDir intDir
//         // environment = [
//         //     'PATH': toolChainPath,
//         // ]
//       }
//
//       buildOutput {
//         def outputDir = getInstallDir(binary)
//         outputFile = file("${outputDir}/lib/libexpat.so")
//       }
//     }
//   // }
// }

ext.cmakeCommand = 'cmake'

def expatOutputDir = Paths.get("${buildDir}","install","expat").toString()
task expatGenerate(type:Exec) {
  workingDir Paths.get("${buildDir}","build","expat").toString()
  // the award for most obtuse language goes to groovy
  def freakingStrings = ["${emconfigureCommand}","${cmakeCommand}",
    "-DCMAKE_TOOLCHAIN_FILE=${emccToolchain}",
    "-DCMAKE_BUILD_TYPE=Release",
    "-DCMAKE_INSTALL_PREFIX=${expatOutputDir}",
    "-DBUILD_shared=FALSE",
    "-DBUILD_doc=FALSE",
    Paths.get(project.rootDir.path,'expat').toString()] as String[]
  commandLine freakingStrings
}
expatGenerate.doFirst {
  mkdir Paths.get("${buildDir}","install","expat").toString()
  mkdir Paths.get("${buildDir}","build","expat").toString()
}
task expatBuild(type:Exec) {
  workingDir Paths.get("${buildDir}","build","expat").toString()
  def freakingStrings = ["${emmakeCommand}","${cmakeCommand}", "--build", ".", "--target", "install", "--config", "Release"] as String[]
  commandLine freakingStrings
}
expatBuild.dependsOn(expatGenerate)

def libsbmlOutputDir = Paths.get("${buildDir}","install","libsbml").toString()
task libsbmlGenerate(type:Exec) {
  workingDir Paths.get("${buildDir}","build","libsbml").toString()
  // the award for most obtuse language goes to groovy
  def freakingStrings = ["${emconfigureCommand}","${cmakeCommand}",
    "-DCMAKE_TOOLCHAIN_FILE=${emccToolchain}",
    "-DCMAKE_BUILD_TYPE=Release",
    "-DCMAKE_INSTALL_PREFIX=${libsbmlOutputDir}",
    "-DWITH_CPP_NAMESPACE=ON",
    "-DWITH_EXPAT=ON",
    "-DWITH_LIBXML=OFF",
    "-DENABLE_ARRAYS=${enableArrays}",
    "-DENABLE_COMP=${enableComp}",
    "-DENABLE_DISTRIB=${enableDistrib}",
    "-DENABLE_DYN=${enableDyn}",
    "-DENABLE_FBC=${enableFBC}",
    "-DENABLE_GROUPS=${enableGroups}",
    "-DENABLE_LAYOUT=${enableLayout}",
    "-DENABLE_MULTI=${enableMulti}",
    "-DENABLE_QUAL=${enableQual}",
    "-DENABLE_RENDER=${enableRender}",
    "-DENABLE_REQUIREDELEMENTS=ON",
    "-DENABLE_SPATIAL=${enableSpatial}",
    "-DEXPAT_PATH=${expatOutputDir}",
    "-DLIBEXPAT_INCLUDE_DIR="+Paths.get("${buildDir}","install","expat","include").toString(),
    "-DLIBEXPAT_LIBRARY="+Paths.get("${buildDir}","install","expat","lib","libexpat.a").toString(),
    Paths.get(project.rootDir.path,'libsbml').toString()] as String[]
  commandLine freakingStrings
}
libsbmlGenerate.doFirst {
  mkdir Paths.get("${buildDir}","install","libsbml").toString()
  mkdir Paths.get("${buildDir}","build","libsbml").toString()
}
libsbmlGenerate.dependsOn(patchLibSBML)
task libsbmlBuild(type:Exec) {
  workingDir Paths.get("${buildDir}","build","libsbml").toString()
  def freakingStrings = ["${emmakeCommand}","${cmakeCommand}", "--build", ".", "--target", "install", "--config", "Release"] as String[]
  commandLine freakingStrings
}
libsbmlBuild.dependsOn(libsbmlGenerate)


task emccCompileLibSBML(type:Exec) {
  workingDir "${buildDir}"
  def freakingStrings = ["${emccCommand}",
    "-O0",
    "-I",Paths.get(libsbmlOutputDir,"include").toString(),
    "-I",Paths.get(expatOutputDir,"include").toString(),
    "-I",Paths.get("$buildDir","interface","idl").toString(),
    "-std=c++11",
    combineCPP.target,
    Paths.get(libsbmlOutputDir,"lib","libsbml.so").toString(),
    "--post-js",Paths.get("$buildDir","interface","idl","sbml_interface.js"),
    "--post-js",Paths.get(project.rootDir.path,"interface","js","doc_getset.js"),
    "--post-js",Paths.get(project.rootDir.path,"interface","js","plugin_layout.js"),
    "--post-js",Paths.get(project.rootDir.path,"interface","js","plugin_render.js"),
    "--post-js",Paths.get(project.rootDir.path,"interface","js","model_getset.js").toString(),
    "--post-js",Paths.get(project.rootDir.path,"interface","js","astnode_getset.js").toString(),
    "--post-js", Paths.get(project.rootDir.path,"interface","js","reaction_getset.js").toString(),
    "--post-js", Paths.get(project.rootDir.path,"interface","js","spec_ref_getset.js").toString(),
    "--post-js",Paths.get(project.rootDir.path,"interface","js","modifier_spec_ref_getset.js").toString(),
    "--post-js",Paths.get(project.rootDir.path,"interface","js","rules_getset.js").toString(),
    "--post-js",Paths.get(project.rootDir.path,"interface","js","export.js"),
    "-s","DISABLE_EXCEPTION_CATCHING=0",
    "-s","WASM=1",
    "-s","BINARYEN_METHOD='native-wasm'",
    "-s","BINARYEN_TRAP_MODE='clamp'",
    "-s","MODULARIZE=1",
    "-s","EXPORT_NAME=\"libsbml\"",
    "-s","ALLOW_MEMORY_GROWTH=1",
    // "-g",
    "-o","libsbml.js",
    ] as String[]
  if (withEmrun) {
    freakingStrings += ["--emrun"]
  }
  commandLine freakingStrings
}
emccCompileLibSBML.dependsOn(libsbmlBuild).dependsOn(combineCPP)
emccCompileLibSBML.dependsOn(libsbmlBuild).dependsOn(generateIdlInterface)

// print configured settings
println "libsbml.js build configuration"
println " -- expat version $expatVersion"
println " -- libsbml version $libSbmlVersion"
println "    SBML Packages:"
println "    -- Arrays ${enableArrays}"
println "    -- Comp ${enableComp}"
println "    -- Distrib ${enableDistrib}"
println "    -- Dyn ${enableDyn}"
println "    -- FBC ${enableFBC}"
println "    -- Groups ${enableGroups}"
println "    -- Layout ${enableLayout}"
println "    -- Multi ${enableMulti}"
println "    -- Qual ${enableQual}"
println "    -- Render ${enableRender}"
println "    -- Spatial ${enableSpatial}"
